"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[8138],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var o=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function s(e,a){if(null==e)return{};var t,o,r=function(e,a){if(null==e)return{};var t,o,r={},n=Object.keys(e);for(o=0;o<n.length;o++)t=n[o],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(o=0;o<n.length;o++)t=n[o],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),l=function(e){var a=o.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):p(p({},a),e)),t},c=function(e){var a=l(e.components);return o.createElement(i.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var t=e.components,r=e.mdxType,n=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(t),m=r,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||n;return t?o.createElement(b,p(p({ref:a},c),{},{components:t})):o.createElement(b,p({ref:a},c))}));function b(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var n=t.length,p=new Array(n);p[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[u]="string"==typeof e?e:r,p[1]=s;for(var l=2;l<n;l++)p[l]=t[l];return o.createElement.apply(null,p)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1979:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>p,default:()=>d,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var o=t(7462),r=(t(7294),t(3905));const n={},p="Prototipos",s={unversionedId:"javascript/avanzado/prototipos",id:"javascript/avanzado/prototipos",title:"Prototipos",description:"JavaScript es un lenguaje orientado a objetos \\(en JavaScript I vimos los objetos literales\\). Sin embargo, a diferencia de otros lenguajes orientados a objetos como Java, Ruby, C\\#, etc. que utilizan clases, JavaScript est\xe1 basado en prototipos.",source:"@site/docs/javascript/avanzado/prototipos.md",sourceDirName:"javascript/avanzado",slug:"/javascript/avanzado/prototipos",permalink:"/docs/javascript/avanzado/prototipos",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/avanzado/prototipos.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Objetos literales",permalink:"/docs/javascript/objetos-literales"},next:{title:"Librer\xedas \\(Node.js\\)",permalink:"/docs/javascript/avanzado/librerias-node.js"}},i={},l=[{value:"Funci\xf3n constructora",id:"funci\xf3n-constructora",level:2},{value:"Accediendo a las propiedades de un objeto",id:"accediendo-a-las-propiedades-de-un-objeto",level:2},{value:"Agregando propiedades al prototipo de un objeto",id:"agregando-propiedades-al-prototipo-de-un-objeto",level:2}],c={toc:l},u="wrapper";function d(e){let{components:a,...t}=e;return(0,r.kt)(u,(0,o.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"prototipos"},"Prototipos"),(0,r.kt)("p",null,"JavaScript ",(0,r.kt)("strong",{parentName:"p"},"es un lenguaje orientado a objetos")," ","(","en ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/makeitrealcamp/guias-de-make-it-real/tree/c2b90a7a324e43c4dc6689e308b6fc3f19e612d4/js-ii/js/9-objetos-literales.md"},"JavaScript I")," vimos los objetos literales",")",". Sin embargo, a diferencia de otros lenguajes orientados a objetos como Java, Ruby, C","#",", etc. que utilizan ",(0,r.kt)("strong",{parentName:"p"},"clases"),", JavaScript ",(0,r.kt)("strong",{parentName:"p"},"est\xe1 basado en prototipos"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nota:")," ES6 introduce ",(0,r.kt)("strong",{parentName:"p"},"clases")," a JavaScript. Sin embargo, las nuevas ",(0,r.kt)("strong",{parentName:"p"},"clases")," de JavaScript no son m\xe1s que un truco sobre los ",(0,r.kt)("strong",{parentName:"p"},"prototipos"),". En el cap\xedtulo de ES6 hablaremos sobre las ",(0,r.kt)("strong",{parentName:"p"},"clases"),"."),(0,r.kt)("p",null,"En JavaScript, cada ",(0,r.kt)("strong",{parentName:"p"},"objeto")," est\xe1 asociado a otro objeto ","(","el ",(0,r.kt)("strong",{parentName:"p"},"prototipo"),")"," del cual hereda sus propiedades."),(0,r.kt)("p",null,"Cuando creas un ",(0,r.kt)("strong",{parentName:"p"},"objeto literal")," ","(","p.e. ",(0,r.kt)("inlineCode",{parentName:"p"},'{ nombre: "Pedro" }'),")"," el prototipo es ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.prototype"),", que es el prototipo ra\xedz de todos los objetos."),(0,r.kt)("h2",{id:"funci\xf3n-constructora"},"Funci\xf3n constructora"),(0,r.kt)("p",null,"Existe otra forma de crear objetos en JavaScript y es con una ",(0,r.kt)("strong",{parentName:"p"},"funci\xf3n constructora"),". Veamos un primer ejemplo de una ",(0,r.kt)("strong",{parentName:"p"},"funci\xf3n constructora"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let Persona = function(name) {\n  this.name = name;\n}\n")),(0,r.kt)("p",null,"F\xedjate que para definir las propiedades utilizamos la palabra clave ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),". Aunque parece una funci\xf3n normal ","(","y en cierta forma lo es",")",", con esta funci\xf3n podemos crear varios objetos utilizando la palabra clave ",(0,r.kt)("inlineCode",{parentName:"p"},"new"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let p1 = new Persona("Pedro");\nlet p2 = new Persona("Juan");\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Nota:")," No olvides el ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," cuando utilices una funci\xf3n constructura. Por convenci\xf3n las funciones constructoras se nombran en may\xfasculas para diferenciarlas de una funci\xf3n normal. Siempre que veas una funci\xf3n en may\xfascula ya sabes que es una funci\xf3n constructura y que debes utilizar ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," para invocarla."),(0,r.kt)("h2",{id:"accediendo-a-las-propiedades-de-un-objeto"},"Accediendo a las propiedades de un objeto"),(0,r.kt)("p",null,"En ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/makeitrealcamp/guias-de-make-it-real/tree/c2b90a7a324e43c4dc6689e308b6fc3f19e612d4/js-ii/js/9-objetos-literales.md"},"JavaScript I")," vimos que es posible acceder a las propiedades de un objeto utilizando la notaci\xf3n de corchetes ","(",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),")"," o punto ","(",(0,r.kt)("inlineCode",{parentName:"p"},"."),")",":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'obj["propiedad"];\nobj.propiedad;\n')),(0,r.kt)("p",null,"Ahora que sabes que todo objeto tiene un prototipo del que hereda sus propiedades, veamos c\xf3mo busca JavaScript las ",(0,r.kt)("strong",{parentName:"p"},"propiedades")," en la ",(0,r.kt)("strong",{parentName:"p"},"jerarqu\xeda de prototipos"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Primero busca sobre el ",(0,r.kt)("strong",{parentName:"li"},"objeto")," directamente. Si la encuentra la devuelve."),(0,r.kt)("li",{parentName:"ol"},"Si no la encuentra, busca en el ",(0,r.kt)("strong",{parentName:"li"},"prototipo")," del ",(0,r.kt)("strong",{parentName:"li"},"objeto"),". Si la encuentra la devuelve."),(0,r.kt)("li",{parentName:"ol"},"Si no la encuentra, busca en el ",(0,r.kt)("strong",{parentName:"li"},"prototipo")," del ",(0,r.kt)("strong",{parentName:"li"},"prototipo"),", y as\xed sucesivamente hasta que llega al prototipo ra\xedz ",(0,r.kt)("inlineCode",{parentName:"li"},"Object.prototype"),"."),(0,r.kt)("li",{parentName:"ol"},"Si no la encuentra en ning\xfan objeto de la jerarqu\xeda retorna ",(0,r.kt)("inlineCode",{parentName:"li"},"undefined"),".")),(0,r.kt)("h2",{id:"agregando-propiedades-al-prototipo-de-un-objeto"},"Agregando propiedades al prototipo de un objeto"),(0,r.kt)("p",null,"Para agregar una ",(0,r.kt)("strong",{parentName:"p"},"propiedad")," a todos los ",(0,r.kt)("strong",{parentName:"p"},"objetos")," que han sido creados a partir de una misma ",(0,r.kt)("strong",{parentName:"p"},"funci\xf3n constructora"),", puedes agregar las ",(0,r.kt)("strong",{parentName:"p"},"propiedades")," al ",(0,r.kt)("strong",{parentName:"p"},"prototipo"),". Por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let Persona = function(nombre, apellido) {\n  this.nombre = nombre;\n  this.apellido = apellido;\n};\n\nPersona.prototype.saluda = function() {\n  return "Hola " + this.nombre;\n};\n')),(0,r.kt)("p",null,"Ahora todos los ",(0,r.kt)("strong",{parentName:"p"},"objetos")," creados a partir de la ",(0,r.kt)("strong",{parentName:"p"},"funci\xf3n constructora")," ",(0,r.kt)("inlineCode",{parentName:"p"},"Persona")," van a tener la propiedad ",(0,r.kt)("inlineCode",{parentName:"p"},"saluda")," ","(","no importa si fueron creados antes de definirla",")",":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let pedro = new Persona("Pedro", "Perez");\nconsole.log(pedro.saluda()); // imprime "Hola Pedro"\n')),(0,r.kt)("p",null,"Lo interesante es que, de esta forma, puedes agregarles m\xe9todos a los objetos nativos de JavaScript como ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"},"Array")," y ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"},"Date"),", entre muchos otros."),(0,r.kt)("p",null,"Por ejemplo, imagina que queremos agregar un m\xe9todo a los arreglos que sume todos los elementos, podemos agregarle el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"sum")," a ",(0,r.kt)("inlineCode",{parentName:"p"},"Array.prototype"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"Array.prototype.sum = function() {\n  let total = 0;\n\n  for (let i=0; i < this.length; i++) {\n    total += this[i];\n  }\n\n  return total;\n}\n")),(0,r.kt)("p",null,"Ahora podemos usar este m\xe9todo sobre cualquier arreglo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"[1, 2, 3].sum(); // retorna 6\n")))}d.isMDXComponent=!0}}]);