"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[9060],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>b});var o=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,o,i=function(e,t){if(null==e)return{};var a,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=o.createContext({}),m=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},c=function(e){var t=m(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=m(a),u=i,b=d["".concat(l,".").concat(u)]||d[u]||p[u]||r;return a?o.createElement(b,n(n({ref:t},c),{},{components:a})):o.createElement(b,n({ref:t},c))}));function b(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,n=new Array(r);n[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,n[1]=s;for(var m=2;m<r;m++)n[m]=a[m];return o.createElement.apply(null,n)}return o.createElement.apply(null,a)}u.displayName="MDXCreateElement"},8712:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var o=a(7462),i=(a(7294),a(3905));const r={sidebar_position:8},n="Reescribiendo la historia",s={unversionedId:"git/reescribiendo-la-historia",id:"git/reescribiendo-la-historia",title:"Reescribiendo la historia",description:"En ocasiones vas a necesitar cambiar uno o m\xe1s commits, por ejemplo para cambiarles el mensaje, reorganizarlos, eliminarlos, etc.",source:"@site/docs/git/reescribiendo-la-historia.md",sourceDirName:"git",slug:"/git/reescribiendo-la-historia",permalink:"/docs/git/reescribiendo-la-historia",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/git/reescribiendo-la-historia.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"docsSidebar",previous:{title:"Etiquetas (tags)",permalink:"/docs/git/etiquetas"},next:{title:"Stashing (guardando cambios)",permalink:"/docs/git/stashing"}},l={},m=[{value:"Cambiando el \xfaltimo commit",id:"cambiando-el-\xfaltimo-commit",level:2},{value:"Descartando el \xfaltimo o \xfaltimos commits",id:"descartando-el-\xfaltimo-o-\xfaltimos-commits",level:2},{value:"Reescribir la historia de commits",id:"reescribir-la-historia-de-commits",level:2},{value:"Recuperando commits",id:"recuperando-commits",level:2}],c={toc:m},d="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(d,(0,o.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"reescribiendo-la-historia"},"Reescribiendo la historia"),(0,i.kt)("p",null,"En ocasiones vas a necesitar cambiar uno o m\xe1s commits, por ejemplo para cambiarles el mensaje, reorganizarlos, eliminarlos, etc."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Nota:")," Nunca reescribas la historia sobre ramas que hayas publicado en un repositorio remoto y sobre las que otros colaboradores ya puedan estar trabajando."),(0,i.kt)("h2",{id:"cambiando-el-\xfaltimo-commit"},"Cambiando el \xfaltimo commit"),(0,i.kt)("p",null,"Si quieres modificar el mensaje o los cambios del \xfaltimo commit puedes hacer lo siguiente: realiza los cambios que necesites en tu espacio de trabajo (los archivos de tu proyecto), agr\xe9galos al index y ejecuta el siguiente comando:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git commit --amend\n")),(0,i.kt)("p",null,"La opci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"--amend")," le dice a ",(0,i.kt)("strong",{parentName:"p"},"git")," que queremos incluir otros cambios al \xfaltimo commit y que abra el editor de texto por defecto para cambiar el mensaje."),(0,i.kt)("p",null,"Si no quieres cambiar el mensaje puedes utilizar:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git commit --amend --no-edit\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Nota:")," En realidad ",(0,i.kt)("strong",{parentName:"p"},"git")," no modifica el \xfaltimo commit sino que crea uno nuevo y descarta el anterior."),(0,i.kt)("h2",{id:"descartando-el-\xfaltimo-o-\xfaltimos-commits"},"Descartando el \xfaltimo o \xfaltimos commits"),(0,i.kt)("p",null,"Si quieres deshacer por completo el \xfaltimo commit utiliza el siguiente comando:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git reset --hard HEAD^\n")),(0,i.kt)("p",null,"Si omites la opci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"--hard"),", los cambios del commit van a quedar en el espacio de trabajo, as\xed que puedes volver a hacer un commit con ellos si es necesario."),(0,i.kt)("p",null,"Si quieres deshacer m\xe1s commits puedes agregarle m\xe1s caracteres ",(0,i.kt)("inlineCode",{parentName:"p"},"^")," despu\xe9s de ",(0,i.kt)("inlineCode",{parentName:"p"},"HEAD"),". Por ejemplo, si quieres deshacer los tres \xfaltimos commits ejecutar\xedas:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git reset --hard HEAD^^^\n")),(0,i.kt)("p",null,"De nuevo, si omites la opci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"--hard"),", los cambios de esos tres commits van a quedar en el espacio de trabajo."),(0,i.kt)("p",null,"Si quieres deshacer los \xfaltimos 15 commits ser\xeda engorroso escribir quince caracteres ",(0,i.kt)("inlineCode",{parentName:"p"},"^"),". Por eso hay otra notaci\xf3n que hace lo mismo pero es m\xe1s compacta:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git reset --hard HEAD~15\n")),(0,i.kt)("p",null,"Puedes utilizar cualquiera de las dos formas para descartar los \xfaltimos commits."),(0,i.kt)("h2",{id:"reescribir-la-historia-de-commits"},"Reescribir la historia de commits"),(0,i.kt)("p",null,"Si necesitas modificar varios commits a la vez puedes utilizar el rebase interactivo, que abre un editor de texto y te permite eliminar, modificar y unir commits:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git rebase -i HEAD~3\n")),(0,i.kt)("p",null,"Este comando abrir\xeda un editor de texto con los \xfaltimos tres commits e instrucciones para modificarlos:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'pick 2064156 Add multi-buildpack\npick 1a51cde Update buildpacks\npick 8d9019b Small design fix to invoice\n\n# Rebase bbab9a6..8d9019b onto bbab9a6\n#\n# Commands:\n#  p, pick = use commit\n#  r, reword = use commit, but edit the commit message\n#  e, edit = use commit, but stop for amending\n#  s, squash = use commit, but meld into previous commit\n#  f, fixup = like "squash", but discard this commit\'s log message\n#  x, exec = run command (the rest of the line) using shell\n#\n# ...\n')),(0,i.kt)("p",null,"Cada commit tiene un comando a la izquierda que nos permite decidir qu\xe9 hacer con cada uno. Por defecto, la opci\xf3n es ",(0,i.kt)("inlineCode",{parentName:"p"},"pick"),", que significa que ese commit no se va a modificar. Los dem\xe1s comandos son (excepto ",(0,i.kt)("inlineCode",{parentName:"p"},"exec")," que nunca lo hemos visto ser usado):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"r, reword"),": queremos usar el commit pero cambiando el mensaje."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"e, edit"),": queremos user el commit pero necesitamos hacer algunos ajustes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"s, squash"),": queremos unir el commit con el anterior modificando el mensaje."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"f, fixup"),": queremos unir el commit con el anterior descartando el mensaje de este commit (dejando el del anterior).")),(0,i.kt)("p",null,"Si eliminas una l\xednea de commit, el commit ser\xe1 eliminado. Al guardar y cerrar el editor, ",(0,i.kt)("strong",{parentName:"p"},"git")," comienza a aplicar los commits deteni\xe9ndose para cambiar mensajes o realizar los ajustes donde se haya usado la opci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"edit"),"."),(0,i.kt)("h2",{id:"recuperando-commits"},"Recuperando commits"),(0,i.kt)("p",null,"Un commit nunca se borra. Cuando reescribes la historia con cualquiera de las funcionalidades que vimos anteriormente, ",(0,i.kt)("strong",{parentName:"p"},"git")," cambia la referencia o crea nuevos commits. Los commits descartados quedan hu\xe9rfanos (no hay una rama que los referencie)."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"git")," mantiene un historial interno de todos los cambios que se realizan sobre las referencias de los commits del HEAD y de cada rama. A este historial se le conoce como el ",(0,i.kt)("strong",{parentName:"p"},"reflog"),". Para ver el ",(0,i.kt)("strong",{parentName:"p"},"reflog")," del HEAD ejecuta el siguiente comando:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ git reflog\n19a3b8b HEAD@{1}: commit: Small corrections to JS in Browser section\n904d523 HEAD@{2}: checkout: moving from master to peticiones-http\n904d523 HEAD@{3}: pull: Fast-forward\na51a872 HEAD@{4}: checkout: moving from notifications to master\n")),(0,i.kt)("p",null,"Si quieres ver el ",(0,i.kt)("strong",{parentName:"p"},"reflog")," de otra rama simplemente pasa el nombre de la rama al final del comando:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git reflog <nombre-rama>\n")),(0,i.kt)("p",null,"Podemos volver a cualquier punto en el tiempo utilizando el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"git reset"),". Por ejemplo, podemos deshacer el \xfaltimo commit del reflog anterior con el siguiente comando:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"git reset --hard HEAD@{2}\n")))}p.isMDXComponent=!0}}]);