"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[8496],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>k});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var i=o.createContext({}),p=function(e){var a=o.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=p(e.components);return o.createElement(i.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},u=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),u=t,k=c["".concat(i,".").concat(u)]||c[u]||m[u]||r;return n?o.createElement(k,l(l({ref:a},d),{},{components:n})):o.createElement(k,l({ref:a},d))}));function k(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[c]="string"==typeof e?e:t,l[1]=s;for(var p=2;p<r;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6742:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),t=(n(7294),n(3905));const r={},l="Tipos y operadores",s={unversionedId:"javascript/tipos-y-operadores",id:"javascript/tipos-y-operadores",title:"Tipos y operadores",description:"En este cap\xedtulo vamos a hablar sobre cadenas de texto, n\xfameros y booleanos \\(verdadero o falso\\), que son tipos de datos b\xe1sicos en JavaScript, y c\xf3mo realizar algunas operaciones con ellos. Empecemos con las cadenas de texto.",source:"@site/docs/javascript/tipos-y-operadores.md",sourceDirName:"javascript",slug:"/javascript/tipos-y-operadores",permalink:"/docs/javascript/tipos-y-operadores",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/tipos-y-operadores.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Primeros pasos",permalink:"/docs/javascript/primeros-pasos"},next:{title:"Variables",permalink:"/docs/javascript/variables"}},i={},p=[{value:"Cadenas de texto",id:"cadenas-de-texto",level:2},{value:"Imprimiendo una cadena de texto",id:"imprimiendo-una-cadena-de-texto",level:3},{value:"Concatenando cadenas",id:"concatenando-cadenas",level:3},{value:"N\xfameros",id:"n\xfameros",level:2},{value:"Valores y expresiones booleanas",id:"valores-y-expresiones-booleanas",level:3}],d={toc:p},c="wrapper";function m(e){let{components:a,...n}=e;return(0,t.kt)(c,(0,o.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"tipos-y-operadores"},"Tipos y operadores"),(0,t.kt)("p",null,"En este cap\xedtulo vamos a hablar sobre cadenas de texto, n\xfameros y booleanos ","(","verdadero o falso",")",", que son tipos de datos b\xe1sicos en JavaScript, y c\xf3mo realizar algunas operaciones con ellos. Empecemos con las cadenas de texto."),(0,t.kt)("h2",{id:"cadenas-de-texto"},"Cadenas de texto"),(0,t.kt)("p",null,"Una cadena de texto es un conjunto de caracteres encerrados entre comillas simples ","(",(0,t.kt)("inlineCode",{parentName:"p"},"'"),")"," o dobles ","(",(0,t.kt)("inlineCode",{parentName:"p"},'"'),")",". Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"\"Texto entre comillas dobles\"\n'Texto entre comillas simples'\n")),(0,t.kt)("p",null,"Aunque parece f\xe1cil, existen tres errores comunes al definir una cadena de texto para que los tengas en cuenta e intentes evitarlos:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Olvidarse de la comilla de cierre. Por ejemplo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-text"},'"Hola mundo\n'))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Cerrar la cadena con la comilla incorrecta ","(","p.e. abrir la cadena con comilla doble y cerrarla con comilla sencilla",")",". Por ejemplo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-text"},"\"Hola mundo'\n"))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Insertar el mismo tipo de comillas dentro de la cadena de texto. Por ejemplo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-text"},'"Y \xe9l dijo: "Hola Mundo""\n\'Hol\'a mundo\'\n')))),(0,t.kt)("p",null,"Para solucionar el \xfaltimo error ","(","punto 3",")"," podemos encerrar la primera cadena entre comillas simples y la segunda entre comillas dobles para que funcione:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'"Hol\'a mundo"\n\'Y \xe9l dijo: "Hola mundo"\'\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Recuerda:")," Lo importante es que el texto no contenga la comilla que se utiliz\xf3 para definir la cadena."),(0,t.kt)("p",null,"Pero \xbfqu\xe9 pasa si tenemos un texto con comillas simples y dobles? En ese caso tendr\xedamos que utilizar el caracter de escape ",(0,t.kt)("inlineCode",{parentName:"p"},"\\")," como en el siguiente ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"'Y \\'\xe9l dijo\\': \"Hola mundo\"'\n")),(0,t.kt)("p",null,"O"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'"Y \'\xe9l dijo\': \\"Hola mundo\\""\n')),(0,t.kt)("p",null,"En el primer ejemplo escapamos con ",(0,t.kt)("inlineCode",{parentName:"p"},"\\")," las comillas simples porque con esas fue que encerramos el texto, mientras que en el segundo ejemplo escapamos las comillas dobles porque con esas fue que encerramos el texto."),(0,t.kt)("h3",{id:"imprimiendo-una-cadena-de-texto"},"Imprimiendo una cadena de texto"),(0,t.kt)("p",null,"Para imprimir una cadena de texto en la l\xednea de comandos ","(","o en la consola del navegador",")"," utilizamos ",(0,t.kt)("inlineCode",{parentName:"p"},"console.log")," como hicimos en el cap\xedtulo anterior:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log('Y \\'\xe9l dijo\\': \"Hola mundo\"');\n")),(0,t.kt)("p",null,"Si guardas esa l\xednea en un archivo llamado ",(0,t.kt)("inlineCode",{parentName:"p"},"strings.js")," y lo ejecutas, el resultado deber\xeda ser el siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},"$ node strings.js\nY '\xe9l dijo': \"Hola mundo\"\n")),(0,t.kt)("h3",{id:"concatenando-cadenas"},"Concatenando cadenas"),(0,t.kt)("p",null,"Es posible unir cadenas de texto con el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"+"),". Por ejemplo, abre la consola de Node.js y ejecuta lo siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'"Hola" + "Mundo" + "C\xf3mo" + "Est\xe1s"\n')),(0,t.kt)("p",null,"Deber\xedas ver algo como esto:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},'$ node\n> "Hola" + "Mundo" + "C\xf3mo" + "Est\xe1s"\nHolaMundoC\xf3moEst\xe1s\n')),(0,t.kt)("p",null,"F\xedjate que las palabras no se separan con espacio autom\xe1ticamente, tenemos que agregar los espacios expl\xedcitamente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},'$ node\n> console.log("Hola " + "Mundo " + "C\xf3mo " + "Est\xe1s");\nHola Mundo C\xf3mo Est\xe1s\n')),(0,t.kt)("p",null,"Debes tener cuidado al concatenar cadenas y n\xfameros."),(0,t.kt)("p",null,"En este momento la concatenaci\xf3n de cadenas no es muy \xfatil porque hubiesemos podido escribir todo el texto ",(0,t.kt)("inlineCode",{parentName:"p"},'"Hola Mundo C\xf3mo Est\xe1s"')," dentro de una sola cadena, pero a medida que veamos otros conceptos se va a volver cada vez m\xe1s importante."),(0,t.kt)("h2",{id:"n\xfameros"},"N\xfameros"),(0,t.kt)("p",null,"Crea un nuevo archivo llamado ",(0,t.kt)("inlineCode",{parentName:"p"},"numbers.js")," con el siguiente c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(1 + 2)\nconsole.log(3 * 4 + 5)\nconsole.log(8 / 2)\n")),(0,t.kt)("p",null,"Si lo ejecutas deber\xedas ver algo as\xed:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},"$ node numbers.js\n3\n17\n4\n")),(0,t.kt)("p",null,"F\xedjate en la segunda l\xednea del ejemplo. JavaScript sigue el mismo estandar que en matem\xe1ticas, y por lo tanto la multiplicaci\xf3n se ejecuta primero que la suma. Puedes cambiar el comportamiento con par\xe9ntesis. Por ejemplo, cambia la operaci\xf3n de la segunda l\xednea por ",(0,t.kt)("inlineCode",{parentName:"p"},"3 * (4 + 5)"),". El resultado ahora deber\xeda ser ",(0,t.kt)("inlineCode",{parentName:"p"},"27"),"."),(0,t.kt)("p",null,"A diferencia de las cadenas de texto, los n\xfameros ",(0,t.kt)("strong",{parentName:"p"},"no")," se encierran entre comillas de nin\xfan tipo ","(","de lo contrario JavaScript los trata como texto y no como n\xfameros",")",". Por ejemplo, abre la consola de Node.js y escribe ",(0,t.kt)("inlineCode",{parentName:"p"},'"1" + "2"'),". El resultado ya no es ",(0,t.kt)("inlineCode",{parentName:"p"},"3"),", es la cadena de texto ",(0,t.kt)("inlineCode",{parentName:"p"},'"12"'),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},'$ node\n> "1" + "2"\n\'12\'\n')),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Debes tener cuidado al concatenar cadenas y hacer sumas"),", porque los dos utilizan el mismo operador ",(0,t.kt)("inlineCode",{parentName:"p"},"+"),". Por ejemplo, intenta lo siguiente en la consola de Node.js:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},"$ node\n> \"1 + 2 es \" + 1 + 2\n'1 + 2 es 12'\n> \"1 + 2 es \" + (1 + 2)\n'1 + 2 es 3'\n")),(0,t.kt)("p",null,"En el primer ejemplo JavaScript toma la cadena ",(0,t.kt)("inlineCode",{parentName:"p"},'"1 + 2 es "')," y la concatena con ",(0,t.kt)("inlineCode",{parentName:"p"},'"1"'),", luego concatena el ",(0,t.kt)("inlineCode",{parentName:"p"},'"2"'),", y el resultado es ",(0,t.kt)("inlineCode",{parentName:"p"},'"1 + 2 es 12"'),"."),(0,t.kt)("p",null,"En el segundo ejemplo JavaScript realiza primero la operaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"(1 + 2)"),", que da ",(0,t.kt)("inlineCode",{parentName:"p"},"3"),", y luego concatena la cadena ",(0,t.kt)("inlineCode",{parentName:"p"},'"1 + 2 es "')," con ese ",(0,t.kt)("inlineCode",{parentName:"p"},"3"),", por eso es que el resultado es ahora ",(0,t.kt)("inlineCode",{parentName:"p"},'"1 + 2 es 3"'),"."),(0,t.kt)("h3",{id:"valores-y-expresiones-booleanas"},"Valores y expresiones booleanas"),(0,t.kt)("p",null,"Existen dos valores booleanos en programaci\xf3n: verdadero ","(",(0,t.kt)("inlineCode",{parentName:"p"},"true"),")"," y falso ","(",(0,t.kt)("inlineCode",{parentName:"p"},"false"),")",". Abre la consola de Node.js, escribe ",(0,t.kt)("inlineCode",{parentName:"p"},"true")," y oprime Enter, despu\xe9s escribe ",(0,t.kt)("inlineCode",{parentName:"p"},"false")," y oprime Enter. El resultado debe ser el siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},"$ node\n> true\ntrue\n> false\nfalse\n")),(0,t.kt)("p",null,"Tambi\xe9n es posible escribir ",(0,t.kt)("strong",{parentName:"p"},"expresiones")," que eval\xfaen a ",(0,t.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"false"),". Escribe ahora las siguientes expresiones en la consola de Node.js:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"5 > 3")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"5 >= 3")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"4 < 4")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"4 <= 4")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"2 === 2")),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"2 !== 2"))),(0,t.kt)("p",null,"El resultado deber\xeda ser el siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},'$ node\n> 5 > 3\ntrue\n> 5 >= 3\ntrue\n> 4 < 4\nfalse\n> 4 <= 4\ntrue\n> 2 === 2\ntrue\n> 2 !== 2\nfalse\n> "ruby" === "javascript"\nfalse\n> "ruby" !== "javascript"\ntrue\n')),(0,t.kt)("p",null,"A los operadorres ",(0,t.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,t.kt)("inlineCode",{parentName:"p"},">"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,t.kt)("inlineCode",{parentName:"p"},">="),", ",(0,t.kt)("inlineCode",{parentName:"p"},"==="),", ",(0,t.kt)("inlineCode",{parentName:"p"},"!==")," se les llama ",(0,t.kt)("strong",{parentName:"p"},"operadores l\xf3gicos")," y se utilizan para crear expresiones que se eval\xfaan a un valor booleano: verdadero ","(",(0,t.kt)("inlineCode",{parentName:"p"},"true"),")"," o falso ","(",(0,t.kt)("inlineCode",{parentName:"p"},"false"),")","."),(0,t.kt)("p",null,"En JavaScript existe el operador ",(0,t.kt)("inlineCode",{parentName:"p"},"==")," y el ",(0,t.kt)("inlineCode",{parentName:"p"},"===")," ","(","as\xed como el ",(0,t.kt)("inlineCode",{parentName:"p"},"!=")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"!=="),")",". Veamos dos ejemplos para explicar la diferencia:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-text"},'$ node\n> 1 == "1"\ntrue\n> 1 === "1"\nfalse\n')),(0,t.kt)("p",null,"En los dos ejemplos estamos comparando el n\xfamero ",(0,t.kt)("inlineCode",{parentName:"p"},"1")," con la cadena de texto ",(0,t.kt)("inlineCode",{parentName:"p"},'"1"'),". En la mayor\xeda de lenguajes esto ser\xeda ",(0,t.kt)("inlineCode",{parentName:"p"},"false")," porque son tipos diferentes, estamos comparando un n\xfamero con una cadena de texto. Pero el ",(0,t.kt)("inlineCode",{parentName:"p"},"==")," realiza una conversi\xf3n de tipos primero y despu\xe9s eval\xfaa la igualdad."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," Hoy el ",(0,t.kt)("inlineCode",{parentName:"p"},"==")," y el ",(0,t.kt)("inlineCode",{parentName:"p"},"!=")," se consideran mala pr\xe1ctica y de ahora en adelante utilizaremos el ",(0,t.kt)("inlineCode",{parentName:"p"},"===")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"!==")," para hacer comparaciones."))}m.isMDXComponent=!0}}]);