"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[2953],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>g});var t=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,s=function(e,a){if(null==e)return{};var n,t,s={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=t.createContext({}),l=function(e){var a=t.useContext(p),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=l(e.components);return t.createElement(p.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=s,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?t.createElement(g,o(o({ref:a},c),{},{components:n})):t.createElement(g,o({ref:a},c))}));function g(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in a)hasOwnProperty.call(a,p)&&(i[p]=a[p]);i.originalType=e,i[u]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7866:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var t=n(7462),s=(n(7294),n(3905));const r={},o="Testing",i={unversionedId:"nodejs/express/avanzado/testing",id:"nodejs/express/avanzado/testing",title:"Testing",description:"En este cap\xedtulo vamos a ver c\xf3mo escribir pruebas automatizadas para tus aplicaciones de Express. Vamos a ver c\xf3mo crear pruebas para las rutas y pruebas de sistema (que incluyen desde la interacci\xf3n en el navegador hasta la base de datos).",source:"@site/docs/nodejs/express/avanzado/testing.md",sourceDirName:"nodejs/express/avanzado",slug:"/nodejs/express/avanzado/testing",permalink:"/docs/nodejs/express/avanzado/testing",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/nodejs/express/avanzado/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Mongoose",permalink:"/docs/nodejs/express/avanzado/mongoose"},next:{title:"Despliegue con Heroku",permalink:"/docs/nodejs/express/avanzado/deployment"}},p={},l=[{value:"Probando las rutas",id:"probando-las-rutas",level:2},{value:"MongoDB",id:"mongodb",level:3},{value:"Autenticaci\xf3n",id:"autenticaci\xf3n",level:3},{value:"Pruebas de sistema",id:"pruebas-de-sistema",level:2}],c={toc:l},u="wrapper";function d(e){let{components:a,...n}=e;return(0,s.kt)(u,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"testing"},"Testing"),(0,s.kt)("p",null,"En este cap\xedtulo vamos a ver c\xf3mo escribir ",(0,s.kt)("strong",{parentName:"p"},"pruebas automatizadas")," para tus aplicaciones de ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express"),". Vamos a ver c\xf3mo crear pruebas para las rutas y pruebas de sistema (que incluyen desde la interacci\xf3n en el navegador hasta la base de datos)."),(0,s.kt)("h2",{id:"probando-las-rutas"},"Probando las rutas"),(0,s.kt)("p",null,"Asumiendo que ya has inclu\xeddo ",(0,s.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"Express"),", el primer paso es incluir las librer\xedas que vamos a utilizar para hacer las pruebas: ",(0,s.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/docs/en/getting-started.html"},"Jest"),", ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/visionmedia/supertest"},"Supertest")," y ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/visionmedia/superagent"},"Superagent"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"# npm\n$ npm install jest supertest superagent --save-dev\n")),(0,s.kt)("p",null,"El siguiente paso es separar la aplicaci\xf3n del servidor. Por ejemplo, la aplicaci\xf3n puede estar en ",(0,s.kt)("inlineCode",{parentName:"p"},"app.js"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst app = express();\napp.get('/', (req, res) => {\n    res.status(200).send('Hello World!');\n})\nmodule.exports = app;\n")),(0,s.kt)("p",null,"Y en ",(0,s.kt)("inlineCode",{parentName:"p"},"server.js")," requerimos ",(0,s.kt)("inlineCode",{parentName:"p"},"app.js")," y prendemos el servidor:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const app = require('./app');\napp.listen(3000, () => console.log('Listening on port 3000!'));\n")),(0,s.kt)("p",null,"De esa forma vamos a importar ",(0,s.kt)("inlineCode",{parentName:"p"},"app.js")," para realizar las pruebas de nuestras rutas."),(0,s.kt)("p",null,"En el archivo ",(0,s.kt)("inlineCode",{parentName:"p"},"app.test.js")," escribe las pruebas:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"const request = require('supertest');\nconst app = require('./app');\n\ndescribe('/', () => {\n  test('GET responds with success code', async () => {\n    const response = await request(app).get('/');\n    expect(response.statusCode).toBe(200);\n  });\n});\n")),(0,s.kt)("p",null,"Revisa que tu ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," tenga configurado el script de pruebas con la opci\xf3n ",(0,s.kt)("inlineCode",{parentName:"p"},"--forceExit"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "test": "jest --forceExit"\n  },\n  ...\n}\n')),(0,s.kt)("p",null,"Y ejecuta las pruebas con el siguiente comando:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ npm test\n")),(0,s.kt)("h3",{id:"mongodb"},"MongoDB"),(0,s.kt)("p",null,"Si est\xe1s utilizando MongoDB utiliza una variable de entorno en la aplicaci\xf3n para pasarle la URL de conexi\xf3n:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},"mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/<dev-db-name>', { useNewUrlParser: true });\n")),(0,s.kt)("p",null,"Modifica ",(0,s.kt)("inlineCode",{parentName:"p"},"package.json")," para que la prueba se ejecute con otra base de datos:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "test": "MONGODB_URI=mongodb://localhost:27017/<test-db-name> jest --forceExit"\n},\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Nota:")," No olvides cambiar ",(0,s.kt)("inlineCode",{parentName:"p"},"<dev-db-name>")," y ",(0,s.kt)("inlineCode",{parentName:"p"},"<test-db-name>")," con los nombres de tu base de datos de desarrollo y pruebas respectivamente."),(0,s.kt)("p",null,"Y en la prueba agrega lo siguiente:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const mongoose = require("mongoose");\n\nbeforeEach(async () => {\n  // antes de cada prueba limpiamos todas las colecciones para iniciar con una\n  // base de datos en blanco\n  for (let i in mongoose.connection.collections) {\n    await mongoose.connection.collections[i].remove({});\n  }\n});\n\nafterAll(async () => {\n  await mongoose.disconnect();\n});\n')),(0,s.kt)("p",null,"En la primera l\xednea estamos requiriendo Mongoose (esto lo debes agregar con los dem\xe1s ",(0,s.kt)("inlineCode",{parentName:"p"},"require"),")."),(0,s.kt)("p",null,"En la l\xednea 3 agregamos un ",(0,s.kt)("inlineCode",{parentName:"p"},"beforeEach")," con una funci\xf3n que se va a ejecutar antes de cada prueba y que va a limpiar todas las colecciones de la base de datos."),(0,s.kt)("p",null,"En la l\xednea 11 agregamos un ",(0,s.kt)("inlineCode",{parentName:"p"},"afterAll")," con una funci\xf3n que se va a ejecutar despu\xe9s de todas las pruebas y que va a desconectarse de Mongoose."),(0,s.kt)("h3",{id:"autenticaci\xf3n"},"Autenticaci\xf3n"),(0,s.kt)("p",null,"Para probar rutas que requieren autenticaci\xf3n podemos crear un m\xe9todo de ayuda que realiza la autenticaci\xf3n antes de ejecutar el resto de nuestra prueba. Por ejemplo, en una prueba podemos tener el siguiente c\xf3digo:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const request = require(\'supertest\');\nconst mongoose = require("mongoose");\nconst User = require("./User");\nconst app = require(\'./app\');\n\n// Esto soluciona un issue de Jest con las cookies en Superagent. Ver\n// https://github.com/facebook/jest/issues/2549\nrequest.agent.prototype._saveCookies = function(res) {\n  const cookies = res.headers[\'set-cookie\'];\n  if (cookies) this.jar.setCookies(cookies[0].split(","));\n};\n\nconst signIn = async (credentials) => {\n  const agent = request.agent(app);\n  await agent.post(\'/login\')\n      .type("form")\n      .send(credentials);\n\n  return agent;\n}\n\ndescribe("GET /private", () => {\n  test("redirects to login if not authenticated", async () => {\n    const response = await request(app).get(\'/polls\');\n    expect(response.statusCode).toBe(302);\n    expect(response.headers.location).toBe("/login");\n  });\n\n  test("responds with success code if authenticated", async () => {\n    const credentials = { email: "pedro@gmail.com", password: "test1234" };\n    const user = await User.create(credentials);\n    const agent = await signIn(credentials);\n\n    const response = await agent.get("/private");\n    expect(response.statusCode).toBe(200);\n  });\n});\n')),(0,s.kt)("p",null,"En la l\xednea 13 creamos un m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},"signIn")," que se va a encargar de autenticar al usuario haciendo ",(0,s.kt)("inlineCode",{parentName:"p"},"POST")," a ",(0,s.kt)("inlineCode",{parentName:"p"},"/login"),". Despu\xe9s tenemos dos pruebas, una que verifica que el usuario sea redirigido a ",(0,s.kt)("inlineCode",{parentName:"p"},"/login")," si no est\xe1 autenticado y otra que permita el acceso si est\xe1 autenticado."),(0,s.kt)("h2",{id:"pruebas-de-sistema"},"Pruebas de sistema"),(0,s.kt)("p",null,"Las pruebas de sistema se utilizan para probar la interacci\xf3n desde el navegador hasta la base de datos. Son el tipo de pruebas m\xe1s completas, aunque tambi\xe9n las m\xe1s lentas."),(0,s.kt)("p",null,"El primer paso es instalar ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/GoogleChrome/puppeteer"},"Puppeteer"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ npm install --save-dev puppeteer\n")),(0,s.kt)("p",null,"La siguiente es un ejemplo de una prueba de sistema:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-javascript"},'const puppeteer = require("puppeteer");\nconst mongoose = require("mongoose");\nconst app = require("./app");\n\nlet server;\nlet page;\nlet browser;\nbeforeAll(async () => {\n  server = app.listen(3000);\n\n  browser = await puppeteer.launch({\n    headless: true,\n    args: [`--window-size=1920,1080`]\n  });\n  page = await browser.newPage();\n  await page.setViewport({ width, height });\n});\n\nbeforeEach(async () => {\n  for (let i in mongoose.connection.collections) {\n    await mongoose.connection.collections[i].remove({});\n  }\n});\n\nafterAll(async () => {\n  server.close();\n  await mongoose.disconnect();\n  browser.close();\n});\n\ntest("user can register and login", async () => {\n  await page.goto("http://localhost:3000/");\n  await page.click(\'a[href="/register"]\');\n\n  // registrarse\n  await page.waitFor(\'input[id=email]\');\n  await page.type("input[id=email]", "pedro@gmail.com");\n  await page.type("input[id=password]", "test1234");\n  const nav = page.waitForNavigation();\n  await page.click("button[type=submit]");\n  await nav;\n\n  // login\n  expect(page.url()).toBe("/login");\n  await page.type("input[id=email]", "pedro@gmail.com");\n  await page.type("input[id=password]", "test1234");\n\n  expect(page.url()).toBe("/");\n});\n')))}d.isMDXComponent=!0}}]);