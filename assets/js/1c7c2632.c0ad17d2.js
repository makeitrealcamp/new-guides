"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[8946],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>b});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),u=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},c=function(e){var a=u(e.components);return r.createElement(s.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),p=t,b=d["".concat(s,".").concat(p)]||d[p]||m[p]||i;return n?r.createElement(b,o(o({ref:a},c),{},{components:n})):r.createElement(b,o({ref:a},c))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[d]="string"==typeof e?e:t,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2573:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var r=n(7462),t=(n(7294),n(3905));const i={},o="Algoritmos de b\xfasqueda",l={unversionedId:"algoritmos/busqueda",id:"algoritmos/busqueda",title:"Algoritmos de b\xfasqueda",description:"Los algoritmos de b\xfasqueda nos permiten encontrar un elemento dentro de una estructura de datos (p.e. una lista, un \xe1rbo, un grafo, etc.). En este cap\xedtulo vamos a hablar exclusivamente de b\xfasqueda en listas.",source:"@site/docs/algoritmos/busqueda.md",sourceDirName:"algoritmos",slug:"/algoritmos/busqueda",permalink:"/docs/algoritmos/busqueda",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/algoritmos/busqueda.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"ordenamiento",permalink:"/docs/algoritmos/ordenamiento"},next:{title:"Programaci\xf3n din\xe1mica",permalink:"/docs/algoritmos/programacion-dinamica"}},s={},u=[{value:"Listas",id:"listas",level:2},{value:"B\xfasqueda binaria",id:"b\xfasqueda-binaria",level:3}],c={toc:u},d="wrapper";function m(e){let{components:a,...n}=e;return(0,t.kt)(d,(0,r.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"algoritmos-de-b\xfasqueda"},"Algoritmos de b\xfasqueda"),(0,t.kt)("p",null,"Los algoritmos de b\xfasqueda nos permiten encontrar un elemento dentro de una estructura de datos (p.e. una lista, un \xe1rbo, un grafo, etc.). En este cap\xedtulo vamos a hablar exclusivamente de b\xfasqueda en listas."),(0,t.kt)("h2",{id:"listas"},"Listas"),(0,t.kt)("p",null,"Existen dos algoritmos para buscar un elemento en una lista: la b\xfasqueda lineal y la b\xfasqueda binaria (que require que la lista est\xe9 ordenada)."),(0,t.kt)("p",null,"En la secci\xf3n ",(0,t.kt)("a",{parentName:"p",href:"/docs/algoritmos/describiendo-algoritmos"},"Descripci\xf3n de un algoritmo")," hablamos de la b\xfasqueda lineal, que quiza es uno de los algoritmos m\xe1s simples: se recorre toda la lista hasta encontrar el elemento."),(0,t.kt)("p",null,"La b\xfasqueda lineal es ",(0,t.kt)("inlineCode",{parentName:"p"},"O(n)"),". Sin embargo, si la lista est\xe1 ordenada podemos utilizar la b\xfasqueda binaria, que es ",(0,t.kt)("inlineCode",{parentName:"p"},"O(log n)"),"."),(0,t.kt)("h3",{id:"b\xfasqueda-binaria"},"B\xfasqueda binaria"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"Entrada:\n* lista: arreglo de elementos\n* valor: el valor que estamos buscando\n\nSalida: la posici\xf3n en la que se encuentra el valor (o -1 si no lo encuentra)\n\nPrerequisitos: la lista se encuentra ordenada\n")),(0,t.kt)("p",null,"La b\xfasqueda binaria sigue la estrategia de divide y vencer\xe1s. Aprovechando que la lista est\xe1 ordenada iniciamos comparando el elemento que buscado con el valor que se encuentra en la mitad de la lista. Si el elemento es mayor (o menor) podemos descartar la otra mitad y volver a repetir el proceso en la mitad donde esperamos encontrar el elemento."),(0,t.kt)("p",null,"Este algoritmo se puede escribir de forma recursiva:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"BinarySearch(lista, elem)\n  Retorne BinarySearchRecursive(lista, elem, 0, lista.length)\n\nBinarySearchRecursive(lista, elem, inicio, fin)\n  Si inicio es mayor a fin\n    Retorne -1\n\n  mitad = mitad entre inicio y fin\n  Si el valor en la posici\xf3n mitad es igual a elem\n    Retorne mitad\n  Si el valor en la posici\xf3n mitad es menor a elem\n    Retorne BinarySearchRecursive(lista, elem, mitad + 1, fin)\n  Si el valor en la posici\xf3n mitad es mayor a elem\n    Retorne BinarySearchRecursive(lista, elem, inicio, mitad - 1)  \n")),(0,t.kt)("p",null,"La funci\xf3n recursiva necesita algunos argumentos adicionales as\xed que utilizamos una funci\xf3n adicional ",(0,t.kt)("inlineCode",{parentName:"p"},"BinarySearchRecursive")," y la invocamos desde la funci\xf3n principal ",(0,t.kt)("inlineCode",{parentName:"p"},"BinarySearch"),"."))}m.isMDXComponent=!0}}]);