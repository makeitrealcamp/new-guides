"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[3921],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(k,s(s({ref:n},p),{},{components:t})):a.createElement(k,s({ref:n},p))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var c=2;c<r;c++)s[c]=t[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6517:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=t(7462),o=(t(7294),t(3905));const r={},s="Web Sockets",i={unversionedId:"nodejs/express/avanzado/web-sockets",id:"nodejs/express/avanzado/web-sockets",title:"Web Sockets",description:"Web Sockets es una tecnolog\xeda que permite crear aplicaciones capaces de recibir informaci\xf3n del servidor y actualizarse en tiempo real, sin necesidad de refrescar la p\xe1gina.",source:"@site/docs/nodejs/express/avanzado/web-sockets.md",sourceDirName:"nodejs/express/avanzado",slug:"/nodejs/express/avanzado/web-sockets",permalink:"/docs/nodejs/express/avanzado/web-sockets",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/nodejs/express/avanzado/web-sockets.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Despliegue con Heroku",permalink:"/docs/nodejs/express/avanzado/deployment"},next:{title:"Algoritmos",permalink:"/docs/algoritmos/"}},l={},c=[{value:"El cliente",id:"el-cliente",level:2},{value:"El servidor",id:"el-servidor",level:2},{value:"Socket.io",id:"socketio",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"web-sockets"},"Web Sockets"),(0,o.kt)("p",null,"Web Sockets es una tecnolog\xeda que permite crear aplicaciones capaces de recibir informaci\xf3n del servidor y actualizarse en tiempo real, sin necesidad de refrescar la p\xe1gina."),(0,o.kt)("p",null,"La forma en que funciona Web Sockets es que el navegador, a trav\xe9s de JavaScript, abre una conexi\xf3n HTTP con el servidor y ",(0,o.kt)("strong",{parentName:"p"},"maniente esa conexi\xf3n abierta")," para que el servidor pueda enviarle informaci\xf3n al navegador en cualquier momento."),(0,o.kt)("p",null,"Para que Web Sockets funcione se debe escribir c\xf3digo tanto en el cliente (con JavaScript) como en el servidor (dependiendo del lenguaje que se utilice)."),(0,o.kt)("h2",{id:"el-cliente"},"El cliente"),(0,o.kt)("p",null,"La mayor\xeda de navegadores hoy soportan Web Sockets. El c\xf3digo JavaScript necesario para abrir una conexi\xf3n y escuchar mensajes del servidor es el siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// abrimos el Web Socket\nlet ws = new WebSocket("ws://localhost:3001/chat");\n\nws.onopen = function() {\n  // el Web Socket est\xe1 abierto, podemos empezar a enviar mensajes\n  // con el m\xe9todo send\n  ws.send("Un mensaje");\n};\n\nws.onmessage = function(e) {\n  // esto se invoca autom\xe1ticamente cuando recibimos un mensaje\n  console.log(e.data);\n};\n\nws.onclose = function() {\n  // la conexi\xf3n fue cerrada\n}\n')),(0,o.kt)("h2",{id:"el-servidor"},"El servidor"),(0,o.kt)("p",null,"El servidor se puede escribir en cualquier lenguaje de programaci\xf3n (Web Sockets es una tecnolog\xeda independiente del lenguaje). Para este ejemplo vamos a utilizar Node.js con una librer\xeda llamada ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/HenningM/express-ws"},"express-ws"),"."),(0,o.kt)("p",null,"Para instalar la librer\xeda utiliza NPM o Yarn. Con Yarn utiliza el siguiente comando:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ yarn add express-ws\n")),(0,o.kt)("p",null,"Crea un archivo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," y escribe lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let app = require(\'express\')();\nlet ws = require(\'express-ws\')(app);\n\napp.ws("/chat", function(ws, req) {\n  ws.on("open", function() {\n    // recibimos una nueva conexi\xf3n\n  });\n\n  ws.on("message", function(data) {\n    // recibimos un mensaje\n    ws.send(data);\n  });\n\n  ws.on("close", function() {\n    // un cliente cerr\xf3 la conexi\xf3n\n  });\n});\n\napp.listen(3001, function() {\n  console.log(\'listening on http://localhost:3001/\')\n});\n')),(0,o.kt)("p",null,"Algunas alternativas en otros lenguajes de programaci\xf3n incluyen:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ruby - ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/faye/faye-websocket-ruby"},"Faye's WebSockets")),(0,o.kt)("li",{parentName:"ul"},"Ruby on Rails - ",(0,o.kt)("a",{parentName:"li",href:"http://edgeguides.rubyonrails.org/action_cable_overview.html"},"ActionCable")),(0,o.kt)("li",{parentName:"ul"},"Python - ",(0,o.kt)("a",{parentName:"li",href:"http://websockets.readthedocs.io/en/stable/intro.html"},"websockets")),(0,o.kt)("li",{parentName:"ul"},"Java - ",(0,o.kt)("a",{parentName:"li",href:"https://javatutorial.net/java-websockets-tutorial"},"JSR-356"))),(0,o.kt)("h2",{id:"socketio"},"Socket.io"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://socket.io/"},"Socket.io")," es una librer\xeda de Node.js para desarrollar aplicaciones con WebSockets que tambi\xe9n incluye una librer\xeda para el cliente."),(0,o.kt)("p",null,"El desarrollo con ",(0,o.kt)("a",{parentName:"p",href:"https://socket.io/"},"Socket.io")," es parecido a lo que ya hemos visto, pero Socket.io ofrece varias ventajas y funcionalidades interesantes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Reconexi\xf3n autom\xe1tica."),(0,o.kt)("li",{parentName:"ul"},"Canales (rooms) y eventos."),(0,o.kt)("li",{parentName:"ul"},"Transimisi\xf3n de imagen, audio y video."),(0,o.kt)("li",{parentName:"ul"},"Soporte para navegadores antiguos (p.e. IE9 e IE8).")),(0,o.kt)("p",null,"Veamos un ejemplo. En el cliente debes incluir la librer\xeda de Socket.io:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<script src="socket.io.js"><\/script>\n<script>\n  let socket = io(\'http://localhost:3001/chat\');\n\n  socket.on("connect", function() {\n    // podemos enviar mensajes con el m\xe9todo emit\n    socket.emit("message", "nuevo mensaje");\n  });\n\n  socket.on("message", function (data) {\n    console.log(data);\n  });\n<\/script>\n')),(0,o.kt)("p",null,"En el servidor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let app = require('express')();\nlet http = require('http').Server(app);\nlet io = require('socket.io')(http);\n\napp.get('/', function(req, res){\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', function(socket){\n  console.log('a user connected');\n\n  socket.on('message', function(msg){\n    io.emit('message', msg);\n  });\n\n  socket.on('disconnect', function(){\n    console.log('user disconnected');\n  });\n});\n\nhttp.listen(3001, function(){\n  console.log('listening on *:3000');\n});\n")))}d.isMDXComponent=!0}}]);