"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[2781],{3905:(e,a,o)=>{o.d(a,{Zo:()=>d,kt:()=>v});var n=o(7294);function r(e,a,o){return a in e?Object.defineProperty(e,a,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[a]=o,e}function t(e,a){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var a=1;a<arguments.length;a++){var o=null!=arguments[a]?arguments[a]:{};a%2?t(Object(o),!0).forEach((function(a){r(e,a,o[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):t(Object(o)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(o,a))}))}return e}function i(e,a){if(null==e)return{};var o,n,r=function(e,a){if(null==e)return{};var o,n,r={},t=Object.keys(e);for(n=0;n<t.length;n++)o=t[n],a.indexOf(o)>=0||(r[o]=e[o]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(n=0;n<t.length;n++)o=t[n],a.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),p=function(e){var a=n.useContext(s),o=a;return e&&(o="function"==typeof e?e(a):l(l({},a),e)),o},d=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var o=e.components,r=e.mdxType,t=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(o),m=r,v=c["".concat(s,".").concat(m)]||c[m]||u[m]||t;return o?n.createElement(v,l(l({ref:a},d),{},{components:o})):n.createElement(v,l({ref:a},d))}));function v(e,a){var o=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=o.length,l=new Array(t);l[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<t;p++)l[p]=o[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}m.displayName="MDXCreateElement"},8422:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>p});var n=o(7462),r=(o(7294),o(3905));const t={},l="Objetos literales",i={unversionedId:"javascript/objetos-literales",id:"javascript/objetos-literales",title:"Objetos literales",description:"Los objetos en JavaScript nos ayudan agrupar informaci\xf3n. Un objeto no es m\xe1s que un conjunto de propiedades en donde cada propiedad est\xe1 compuesta de una llave y un valor. Veamos un ejemplo:",source:"@site/docs/javascript/objetos-literales.md",sourceDirName:"javascript",slug:"/javascript/objetos-literales",permalink:"/docs/javascript/objetos-literales",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/objetos-literales.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Funciones",permalink:"/docs/javascript/funciones"},next:{title:"Prototipos",permalink:"/docs/javascript/avanzado/prototipos"}},s={},p=[{value:"Obteniendo valores de un objeto",id:"obteniendo-valores-de-un-objeto",level:2},{value:"Agregando nuevas propiedades al objeto",id:"agregando-nuevas-propiedades-al-objeto",level:2},{value:"Modificando propiedades del objeto",id:"modificando-propiedades-del-objeto",level:2},{value:"Eliminando propiedades de un objeto",id:"eliminando-propiedades-de-un-objeto",level:2},{value:"Recorriendo las propiedades de un objeto",id:"recorriendo-las-propiedades-de-un-objeto",level:2},{value:"M\xe9todos",id:"m\xe9todos",level:2},{value:"Mezclando arreglos y objetos",id:"mezclando-arreglos-y-objetos",level:2}],d={toc:p},c="wrapper";function u(e){let{components:a,...o}=e;return(0,r.kt)(c,(0,n.Z)({},d,o,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"objetos-literales"},"Objetos literales"),(0,r.kt)("p",null,"Los objetos en JavaScript nos ayudan agrupar informaci\xf3n. Un objeto no es m\xe1s que un conjunto de propiedades en donde cada propiedad est\xe1 compuesta de una llave y un valor. Veamos un ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let persona = {\n  nombre: "Germ\xe1n",\n  apellido: "Escobar",\n  edad: 35,\n  estatura: 1.8\n}\n')),(0,r.kt)("p",null,"Con este c\xf3digo estamos creando un objeto y lo estamos almacenando en la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"persona"),". Un objeto se define utilizando corchetes ",(0,r.kt)("inlineCode",{parentName:"p"},"{}"),". Las propiedades se separan con coma ","(",(0,r.kt)("inlineCode",{parentName:"p"},","),")"," y las llaves y valores se separan con dos puntos ","(",(0,r.kt)("inlineCode",{parentName:"p"},":"),")","."),(0,r.kt)("p",null,"En este objeto estamos almacenando la informaci\xf3n de una persona, pero en un objeto podemos almacenar cualquier tipo de informaci\xf3n que requiera esa asociaci\xf3n llave-valor."),(0,r.kt)("p",null,"El valor de una propiedad puede ser cualquier tipo de datos en JavaScript: n\xfameros, cadenas de texto, booleanos, arreglos e incluso funciones y otros objetos."),(0,r.kt)("h2",{id:"obteniendo-valores-de-un-objeto"},"Obteniendo valores de un objeto"),(0,r.kt)("p",null,"Para obtener el nombre de la persona en el objeto que definimos previamente lo har\xedamos utilizando ",(0,r.kt)("inlineCode",{parentName:"p"},"persona.nombre"),". Por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(persona.nombre);\n")),(0,r.kt)("p",null,"Para obtener el valor de una llave en un objeto utilizamos la notaci\xf3n punto ","(",(0,r.kt)("inlineCode",{parentName:"p"},"."),")",": el nombre de la variable, seguido de punto, seguido del nombre de la llave:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"console.log(persona.nombre); // imprime Germ\xe1n\nconsole.log(persona.apellido); // imprime Escobar\nconsole.log(persona.edad); // imprime 35\nconsole.log(persona.estatura); // imprime 1.8\n")),(0,r.kt)("p",null,"Existe otra forma equivalente de obtener el valor de una llave utilizando corchetes cuadrados ","(",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),")",":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'persona["nombre"]\n')),(0,r.kt)("p",null,"Esta notaci\xf3n es \xfatil para obtener los valores de forma din\xe1mica. Por ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let llave = "nombre";\nconsole.log(persona[llave]);\n')),(0,r.kt)("p",null,"Primero definimos una variable ",(0,r.kt)("inlineCode",{parentName:"p"},"llave"),", a la que le asignamos el valor ",(0,r.kt)("inlineCode",{parentName:"p"},'"nombre"')," y utilizamos esa variable para obtener el valor. Esto va a ser \xfatil m\xe1s adelante cuando estemos recorriendo las propiedades de un objeto."),(0,r.kt)("p",null,"Como ejercicio intenta cambiar el valor de la variable por cualquier otra llave del objeto y verifica el resultado. \xbfQu\xe9 pasa si utilizamos una llave que no existe? \xa1Int\xe9ntalo!"),(0,r.kt)("h2",{id:"agregando-nuevas-propiedades-al-objeto"},"Agregando nuevas propiedades al objeto"),(0,r.kt)("p",null,"Es posible agregar m\xe1s propiedades a un objeto despu\xe9s de que ha sido creado. Por ejemplo, podr\xedamos agregar una propiedad con llave ",(0,r.kt)("inlineCode",{parentName:"p"},"peso")," y valor ",(0,r.kt)("inlineCode",{parentName:"p"},"70")," de la siguiente forma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"persona.peso = 70;\n")),(0,r.kt)("h2",{id:"modificando-propiedades-del-objeto"},"Modificando propiedades del objeto"),(0,r.kt)("p",null,"Es tambi\xe9n posible modificar los valores de las propiedades de un objeto. Por ejemplo, si queremos cambiar el valor de la llave ",(0,r.kt)("inlineCode",{parentName:"p"},"peso")," lo podemos hacer de la siguiente forma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"persona.peso = 65;\n")),(0,r.kt)("h2",{id:"eliminando-propiedades-de-un-objeto"},"Eliminando propiedades de un objeto"),(0,r.kt)("p",null,"Para eliminar una propiedad de un objeto utiliza el operador ",(0,r.kt)("inlineCode",{parentName:"p"},"delete"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"delete person.peso;\n")),(0,r.kt)("h2",{id:"recorriendo-las-propiedades-de-un-objeto"},"Recorriendo las propiedades de un objeto"),(0,r.kt)("p",null,"Existen varias formas de recorrer las propiedades de un objeto en JavaScript. Veamos las dos principales:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let llave in persona) {\n  if (persona.hasOwnProperty(llave)) {\n    console.log(persona[llave])\n  }\n}\n")),(0,r.kt)("p",null,"La raz\xf3n por la que tenemos que agregar la condici\xf3n es que los objetos pueden heredar propiedades de otros objetos, pero esa explicaci\xf3n est\xe1 fuera del alcance de este libro. Por ahora aseg\xfarate de agregar el condicional si vas a utilizar esa forma de iterar."),(0,r.kt)("p",null,"La otra forma de recorrer las propiedades de un objeto es utilizando ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.keys"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let llaves = Object.keys(persona);\nfor (let i=0; i < llaves.length; i++) {\n  let llave = llaves[i];\n  console.log(persona[llave]);\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Object.keys")," retorna un arreglo con las llaves del objeto que almacenamos en la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"llaves"),". Despu\xe9s iteramos por todas las llaves y utilizamos cada llave para obtener, de forma din\xe1mica, el valor de esa llave en el objeto."),(0,r.kt)("h2",{id:"m\xe9todos"},"M\xe9todos"),(0,r.kt)("p",null,"El valor de una propiedad de un objeto puede ser una funci\xf3n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let person = {\n  name: "Pedro",\n  sayHi: function() {\n    console.log("Hola!");\n  }\n}\n')),(0,r.kt)("p",null,"A una funci\xf3n de un objeto se le llama ",(0,r.kt)("strong",{parentName:"p"},"m\xe9todo"),"."),(0,r.kt)("p",null,"Los m\xe9todos pueden utilizar otras propiedades del objeto utilizando la palabra clave ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let person = {\n  name: "Pedro",\n  sayHi: function() {\n    console.log("Hola, me llamo " + this.name);\n  }\n}\n\nperson.sayHi() // "Hola, me llamo Pedro"\n')),(0,r.kt)("h2",{id:"mezclando-arreglos-y-objetos"},"Mezclando arreglos y objetos"),(0,r.kt)("p",null,"Es posible mezclar arreglos y objetos para crear estructuras complejas. Crea un archivo llamado ",(0,r.kt)("inlineCode",{parentName:"p"},"products.js")," y transcribe lo siguiente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let products = [\n  { id: 1, name: "Leche", price: 120, categories: ["familiar", "comida"] },\n  { id: 2, name: "Arroz", price: 80, categories: ["familiar", "comida"] },\n  { id: 3, name: "Lavadora", price: 7800, categories: ["electrodom\xe9sticos"] }\n];\n')),(0,r.kt)("p",null,"En este ejemplo hemos creado un arreglo de objetos. Cada objeto representa un producto y una de sus llaves ","(",(0,r.kt)("inlineCode",{parentName:"p"},"categories"),")"," contiene a su vez un arreglo. Modifiquemos el programa para imprimir los productos en la consola:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'let products = [\n  { id: 1, name: "Leche", price: 120, categories: ["familiar", "comida"] },\n  { id: 2, name: "Arroz", price: 80, categories: ["familiar", "comida"] },\n  { id: 3, name: "Lavadora", price: 7800, categories: ["electrodom\xe9sticos"] }\n];\n\nfor (let i=0; i < products.length; i++) {\n  let product = products[i];\n  console.log(product.name);\n  console.log("  Id: " + product.id);\n  console.log("  Precio: " + product.price);\n  console.log("  Categor\xedas: " + product.categories.join(", "));\n}\n')),(0,r.kt)("p",null,"Lo primero que estamos haciendo es iterando por el arreglo de productos. Por cada uno de los productos ","(","recuerda que cada producto es un objeto",")"," vamos a mostrar el nombre ","(","la llave ",(0,r.kt)("inlineCode",{parentName:"p"},"nombre"),")",", despu\xe9s el identificador ","(","la llave ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),")",", el precio ","(","la llave ",(0,r.kt)("inlineCode",{parentName:"p"},"price"),")"," y las categor\xedas ","(","la llave ",(0,r.kt)("inlineCode",{parentName:"p"},"categories"),")",". Como las categor\xedas est\xe1n en un arreglo debemos utilizar el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"join")," para convertirlas en una cadena."))}u.isMDXComponent=!0}}]);