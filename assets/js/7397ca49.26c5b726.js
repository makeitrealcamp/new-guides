"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[8015],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>g});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function t(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var a=r.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=s(e.components);return r.createElement(c.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},d=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,l=e.originalType,c=e.parentName,p=t(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,g=u["".concat(c,".").concat(d)]||u[d]||m[d]||l;return n?r.createElement(g,i(i({ref:a},p),{},{components:n})):r.createElement(g,i({ref:a},p))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var l=n.length,i=new Array(l);i[0]=d;var t={};for(var c in a)hasOwnProperty.call(a,c)&&(t[c]=a[c]);t.originalType=e,t[u]="string"==typeof e?e:o,i[1]=t;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7220:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>t,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const l={},i="Ciclos",t={unversionedId:"javascript/ciclos",id:"javascript/ciclos",title:"Ciclos",description:'Los ciclos nos permiten repetir la ejecuci\xf3n de un c\xf3digo varias veces. Imagina que quisi\xe9ramos repetir la frase "Hola mundo" 5 veces. Podr\xedamos hacerlo manualmente. Crea un archivo llamado loops.js y escribe el siguiente c\xf3digo:',source:"@site/docs/javascript/ciclos.md",sourceDirName:"javascript",slug:"/javascript/ciclos",permalink:"/docs/javascript/ciclos",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/ciclos.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Condicionales",permalink:"/docs/javascript/condicionales"},next:{title:"Arreglos",permalink:"/docs/javascript/arreglos"}},c={},s=[{value:"for",id:"for",level:2},{value:"Algunos ejemplos",id:"algunos-ejemplos",level:2}],p={toc:s},u="wrapper";function m(e){let{components:a,...l}=e;return(0,o.kt)(u,(0,r.Z)({},p,l,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ciclos"},"Ciclos"),(0,o.kt)("p",null,'Los ciclos nos permiten repetir la ejecuci\xf3n de un c\xf3digo varias veces. Imagina que quisi\xe9ramos repetir la frase "Hola mundo" 5 veces. Podr\xedamos hacerlo manualmente. Crea un archivo llamado ',(0,o.kt)("inlineCode",{parentName:"p"},"loops.js")," y escribe el siguiente c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log("Hola Mundo");\nconsole.log("Hola Mundo");\nconsole.log("Hola Mundo");\nconsole.log("Hola Mundo");\nconsole.log("Hola Mundo");\n')),(0,o.kt)("p",null,'Ejec\xfatalo y deber\xedas ver la frase "Hola mundo" 5 veces en tu pantalla:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node loops.js\nHola mundo\nHola mundo\nHola mundo\nHola mundo\nHola mundo\n")),(0,o.kt)("p",null,"Ahora imagina que quisieramos repetirlo 850 veces. Ya no ser\xeda tan divertido copiar todo ese n\xfamero de l\xedneas en el archivo. Podemos entonces utilizar un ciclo. Un ciclo se crea utilizando la palabra clave ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," seguido de una condici\xf3n, que va a definir el n\xfamero de veces que se va a repetir ese ciclo. Reemplaza el contenido del archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"loops.rb")," por el siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let i = 0;\nwhile (i < 850) {\n  console.log("Hola mundo");\n  i = i + 1;\n}\n')),(0,o.kt)("p",null,'Ejec\xfatalo y revisa que la frase "Hola mundo" aparezca 850 veces. Como ejercicio modif\xedcalo para que aparezca el valor de ',(0,o.kt)("inlineCode",{parentName:"p"},"i")," antes de cada frase. Deber\xeda salir algo as\xed ","(","omitimos algunas l\xedneas para no gastar tanto pap...ehhh...espacio en disco",")",":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node loops.js\n0 Hola mundo\n1 Hola mundo\n2 Hola mundo\n...\n345 Hola mundo\n...\n849 Hola mundo\n")),(0,o.kt)("p",null,"Un ciclo en JavaScript tiene la siguiente sintaxis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"while (<condicion>) {\n  // ac\xe1 va el cuerpo del ciclo, el c\xf3digo que se va a repetir mientras la condici\xf3n se cumpla\n}\n")),(0,o.kt)("p",null,"La condici\xf3n puede ser cualquier valor o expresi\xf3n booleana. El cuerpo del ciclo se va a ejecutar mientras que la condici\xf3n se cumpla. Por ejemplo, crea un archivo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"inifiniteLoop.js")," que contenga lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'while (true) {\n  console.log("Hola Mundo");\n}\n')),(0,o.kt)("p",null,"\xbfQu\xe9 crees que va a ocurrir? Antes de ejecutarlo debes saber que puedes interrumpir cualquier programa oprimiendo ",(0,o.kt)("inlineCode",{parentName:"p"},"Ctrl")," + ",(0,o.kt)("inlineCode",{parentName:"p"},"C")," :",")"),(0,o.kt)("p",null,"El c\xf3digo anterior crea lo que en programaci\xf3n llamamos un ",(0,o.kt)("strong",{parentName:"p"},"ciclo infinito"),". Intenta evitarlos."),(0,o.kt)("p",null,"En el momento en el que la condici\xf3n deja de cumplirse el ciclo se detiene y contin\xfaa con el resto del programa. Podemos crear un ciclo que nunca va a ejecutar el cuerpo del ciclo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'while (false) {\n  console.log("Hola mundo");\n}\n')),(0,o.kt)("p",null,"Si ejecutas ese c\xf3digo no deber\xedas ver ninguna frase ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hola mundo"'),"."),(0,o.kt)("p",null,"En vez de ",(0,o.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," puedes utilizar cualquier otra condici\xf3n como lo hicimos en el ciclo que muestra ",(0,o.kt)("inlineCode",{parentName:"p"},'"Hola mundo"')," 850 veces:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let i = 0;\nwhile (i < 850) {\n  console.log("Hola mundo");\n  i++;\n}\n')),(0,o.kt)("p",null,"Primero declaramos una variable ",(0,o.kt)("inlineCode",{parentName:"p"},"i")," que inicia en 0. Cada vez que ingresa en el ciclo la vamos a incrementar en 1 hasta que lleguemos a 850. En ese momento la condici\xf3n va a dejar de ser verdadero y el ciclo se detendr\xe1."),(0,o.kt)("h2",{id:"for"},"for"),(0,o.kt)("p",null,"El ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," es todo lo que necesitas para hacer ciclos en JavaScript. Sin embargo, ese patr\xf3n que vimos en el ejemplo anterior en el que tenemos una ",(0,o.kt)("strong",{parentName:"p"},"inicializaci\xf3n")," ","(",(0,o.kt)("inlineCode",{parentName:"p"},"let i = 0"),")",", una ",(0,o.kt)("strong",{parentName:"p"},"condici\xf3n")," ","(",(0,o.kt)("inlineCode",{parentName:"p"},"i < 850"),")"," y un ",(0,o.kt)("strong",{parentName:"p"},"incrementador")," ","(",(0,o.kt)("inlineCode",{parentName:"p"},"i++"),")"," es tan com\xfan, que JavaScript tiene un atajo para esto, el ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),"."),(0,o.kt)("p",null,"El ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," tiene la siguiente sintaxis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for (<inicializaci\xf3n>; <condici\xf3n>; <incrementador>) {\n  // el cuerpo del ciclo, el c\xf3digo que se repite mientras que la condici\xf3n sea verdadera\n}\n")),(0,o.kt)("p",null,"El ejemplo anterior lo podemos reescribir de la siguiente forma:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'for (let i = 0; i < 850; i ++) {\n  console.log("Hola mundo");\n}\n')),(0,o.kt)("p",null,"Son equivalentes, la \xfanica diferencia es que el inicializador, la condici\xf3n y el incrementador est\xe1n definidos en la misma l\xednea, pero se ejecuta de la misma forma que el ",(0,o.kt)("inlineCode",{parentName:"p"},"while"),":"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Flujo de la iteraci\xf3n",src:n(4118).Z,width:"500",height:"480"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"La ",(0,o.kt)("strong",{parentName:"li"},"inicializaci\xf3n")," se ejecuta antes de evaluar la ",(0,o.kt)("strong",{parentName:"li"},"condici\xf3n")," por primera vez."),(0,o.kt)("li",{parentName:"ul"},"La ",(0,o.kt)("strong",{parentName:"li"},"condici\xf3n")," se ejecuta cada vez que se itera."),(0,o.kt)("li",{parentName:"ul"},"El ",(0,o.kt)("strong",{parentName:"li"},"cuerpo")," se ejecuta cada vez que la ",(0,o.kt)("strong",{parentName:"li"},"condici\xf3n")," se cumple."),(0,o.kt)("li",{parentName:"ul"},"El ",(0,o.kt)("strong",{parentName:"li"},"incrementador")," se ejecuta cada vez que el ",(0,o.kt)("strong",{parentName:"li"},"cuerpo")," se ejecuta, antes de volver a evaluar la ",(0,o.kt)("strong",{parentName:"li"},"condici\xf3n"),".")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Nota:")," Tanto el inicializador, la condici\xf3n y el incrementador son opcionales. Si quisieras podr\xedas hacer un ciclo infinito con un ",(0,o.kt)("inlineCode",{parentName:"p"},"for")," de la siguiente forma:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for(;;) {\n  // el cuerpo del ciclo tambi\xe9n es opcional\n}\n")),(0,o.kt)("h2",{id:"algunos-ejemplos"},"Algunos ejemplos"),(0,o.kt)("p",null,"Imagina que queremos hacer un programa que imprima los n\xfameros del 10 a 20 pero saltando cada otro n\xfamero, es decir, que imprima 10, 12, 14, 16, 18 y 20."),(0,o.kt)("p",null,"El primer paso antes de escribir el ciclo es identificar las diferentes partes del ciclo: la ",(0,o.kt)("strong",{parentName:"p"},"inicializaci\xf3n"),", la ",(0,o.kt)("strong",{parentName:"p"},"condici\xf3n"),", el ",(0,o.kt)("strong",{parentName:"p"},"incrementador")," y el ",(0,o.kt)("strong",{parentName:"p"},"cuerpo"),"."),(0,o.kt)("p",null,"Para este ejemplo ser\xedan:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Inicializa")," una variable en 10."),(0,o.kt)("li",{parentName:"ol"},"La ",(0,o.kt)("strong",{parentName:"li"},"condici\xf3n")," es que la variable sea menor o igual a 20."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Incrementa")," la variable en dos en cada iteraci\xf3n."),(0,o.kt)("li",{parentName:"ol"},"El ",(0,o.kt)("strong",{parentName:"li"},"cuerpo")," debe imprimir la variable.")),(0,o.kt)("p",null,"Con esta informaci\xf3n ya puedes implementar el ciclo con ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),", recuerda que son equivalentes. La soluci\xf3n utilizando un ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," ser\xeda:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let i = 10;       // el inicializador\nwhile (i <= 20) { // la condici\xf3n\n  console.log(i);\n  i = i + 2;      // el incrementador\n}\n")),(0,o.kt)("p",null,"Podemos hacer lo mismo con un ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i=10; i <= 20; i = i + 2) {\n  console.log(i);\n}\n")),(0,o.kt)("p",null,"Hagamos otro ejemplo. Imagina que queremos imprimir los n\xfameros del 1 a al 100 pero deforma descendente, es decir, 100, 99, 98 ... 1. Empecemos identificando las partes del ciclo:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Inicializa")," una variable en 100."),(0,o.kt)("li",{parentName:"ol"},"La ",(0,o.kt)("strong",{parentName:"li"},"condici\xf3n")," es que la variable sea mayor que 0."),(0,o.kt)("li",{parentName:"ol"},"El ",(0,o.kt)("strong",{parentName:"li"},"incrementador")," va a ser un decrementador en este caso, va a decrementar la variable en 1 cada iteraci\xf3n."),(0,o.kt)("li",{parentName:"ol"},"El ",(0,o.kt)("strong",{parentName:"li"},"cuerpo")," debe imprimir la variable.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let i = 100;\nwhile (i > 0) {\n  console.log(i);\n  i--;\n}\n")))}m.isMDXComponent=!0},4118:(e,a,n)=>{n.d(a,{Z:()=>r});const r=n.p+"assets/images/iteration-flow2-f05a3b477f568ef21a3dca222012964a.png"}}]);