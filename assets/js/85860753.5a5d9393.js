"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[3509],{3905:(e,a,r)=>{r.d(a,{Zo:()=>u,kt:()=>g});var n=r(7294);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function t(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?t(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,n,o=function(e,a){if(null==e)return{};var r,n,o={},t=Object.keys(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var a=n.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},u=function(e){var a=p(e.components);return n.createElement(i.Provider,{value:a},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var r=e.components,o=e.mdxType,t=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(r),c=o,g=d["".concat(i,".").concat(c)]||d[c]||m[c]||t;return r?n.createElement(g,l(l({ref:a},u),{},{components:r})):n.createElement(g,l({ref:a},u))}));function g(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=r.length,l=new Array(t);l[0]=c;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<t;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},3583:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const t={},l="Arreglos",s={unversionedId:"javascript/arreglos",id:"javascript/arreglos",title:"Arreglos",description:"Hasta ahora hemos trabajado con cadenas de texto, n\xfameros y booleanos. En este cap\xedtulo vamos a hablar de un nuevo tipo de datos: los arreglos.",source:"@site/docs/javascript/arreglos.md",sourceDirName:"javascript",slug:"/javascript/arreglos",permalink:"/docs/javascript/arreglos",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/arreglos.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Ciclos",permalink:"/docs/javascript/ciclos"},next:{title:"M\xe1s cadenas de texto",permalink:"/docs/javascript/mas-cadenas-de-texto"}},i={},p=[{value:"Obteniendo elementos del arreglo",id:"obteniendo-elementos-del-arreglo",level:2},{value:"Recorriendo un arreglo",id:"recorriendo-un-arreglo",level:2},{value:"Reemplazando un elemento",id:"reemplazando-un-elemento",level:2},{value:"Insertando nuevos elementos",id:"insertando-nuevos-elementos",level:2},{value:"Eliminando elementos",id:"eliminando-elementos",level:2},{value:"Encontrando la posici\xf3n de un elemento",id:"encontrando-la-posici\xf3n-de-un-elemento",level:2},{value:"Convirtiendo a un string (cadena de texto)",id:"convirtiendo-a-un-string-cadena-de-texto",level:2},{value:"Matrices",id:"matrices",level:2}],u={toc:p},d="wrapper";function m(e){let{components:a,...r}=e;return(0,o.kt)(d,(0,n.Z)({},u,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"arreglos"},"Arreglos"),(0,o.kt)("p",null,"Hasta ahora hemos trabajado con cadenas de texto, n\xfameros y booleanos. En este cap\xedtulo vamos a hablar de un nuevo tipo de datos: los arreglos."),(0,o.kt)("p",null,"Un arreglo es una lista ordenada de elementos de cualquier tipo. Para crear tu primer arreglo abre la consola de Node.js y escribe lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = [1, "Pedro", true, false, "Juan"]\n')),(0,o.kt)("p",null,"La sintaxis de un arreglo es muy simple. Los elementos del arreglo se envuelven entre corchetes y se separan con coma. F\xedjate que el arreglo que creamos contiene n\xfameros, cadenas de texto y booleanos. Cada elemento del arreglo puede ser de cualquier tipo ","(","incluso otros arreglos!",")","."),(0,o.kt)("h2",{id:"obteniendo-elementos-del-arreglo"},"Obteniendo elementos del arreglo"),(0,o.kt)("p",null,"Para obtener la primera posici\xf3n del arreglo que acabamos de crear utilizas ",(0,o.kt)("inlineCode",{parentName:"p"},"array[0]"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ node\n> array = [1, "Pedro", true, false, "Juan"]\n[1, "Pedro", true, false, "Juan"]\n> array[0]\n1\n')),(0,o.kt)("p",null,"La sintaxis para obtener un elemento del arreglo es ",(0,o.kt)("inlineCode",{parentName:"p"},"[n]")," donde ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," es la posici\xf3n empezando en 0. Imprime ls dem\xe1s elementos del arreglo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> array[1]\n"Pedro"\n> array[2]\ntrue\n> array[3]\nfalse\n> array[4]\n"Juan"\n')),(0,o.kt)("p",null,"Puedes obtener el ultimo elemento del arreglo obteniendo la longitud de este y restandole 1, lo cual seria ","[","array.length - 1","]",". Hay que tener en cuenta que la longitud del arreglo no comienza desde 0 sino desde 1."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> array[array.length - 1]\n"Juan"\n')),(0,o.kt)("h2",{id:"recorriendo-un-arreglo"},"Recorriendo un arreglo"),(0,o.kt)("p",null,"En el ejemplo anterior pudimos imprimir cada una de las posiciones porque era un arreglo de pocos elementos. Sin embargo esto no siempre es pr\xe1ctico. Primero, el arreglo puede ser muy grande o puede que no sepamos el tama\xf1o del arreglo. Crea un archivo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"arrays.js")," y escribe el siguiente c\xf3digo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = [1, "Pedro", true, false, "Juan"];\n\nfor (let i = 0; i < array.length; i ++) {\n  console.log(array[i]);\n}\n')),(0,o.kt)("h2",{id:"reemplazando-un-elemento"},"Reemplazando un elemento"),(0,o.kt)("p",null,"Es posible reemplazar el valor de cualquier elemento del arreglo. Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = [1, "Pedro", true, false, "Juan"];\narray[1] = "Germ\xe1n"; // reemplazamos el elemento en la posici\xf3n 1\n\n// [1, "Germ\xe1n", true, false, "Juan"]\n')),(0,o.kt)("p",null,"En este ejemplo estamos reemplazando la posici\xf3n 1 del arreglo ","(","que realmente es la segunda porque recuerda que empieza en 0",")",' con el valor "Germ\xe1n". La l\xednea m\xe1s importante es la siguiente:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'array[1] = "Germ\xe1n";\n')),(0,o.kt)("p",null,"Como ejercicio intenta reemplazar el \xfaltimo elemento ","(",'"Juan"',")"," por otro valor."),(0,o.kt)("h2",{id:"insertando-nuevos-elementos"},"Insertando nuevos elementos"),(0,o.kt)("p",null,"Es posible insertar nuevos elementos en un arreglo ","(","puede estar vac\xedo o tener elementos",")",". Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = ["Pedro"];\narray.push("Germ\xe1n"); // ["Pedro", "Germ\xe1n"]\narray.push("Diana"); // ["Pedro", "Germ\xe1n", "Diana"]\n')),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"push")," te permite agregar un elemento al final de la lista. \xbfQu\xe9 pasa si queremos agregar un elemento en otra posici\xf3n? Para eso sirve el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"splice"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = ["Pedro", "Germ\xe1n", "Diana"];\narray.splice(0, 0, "Juan") // ["Juan", "Pedro", "Germ\xe1n", "Diana"]\n')),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"splice")," se utiliza tanto para insertar como eliminar elementos. Para insertar debes pasarle 3 o m\xe1s argumentos. El primer argumento es la posici\xf3n en la que quieres insertar el elemento. La segunda posici\xf3n debe estar en ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),". Los dem\xe1s argumentos son los elementos que deseas insertar en el arreglo. F\xedjate que en el ejemplo todos los elementos desde esa posici\xf3n se mueven a la derecha."),(0,o.kt)("h2",{id:"eliminando-elementos"},"Eliminando elementos"),(0,o.kt)("p",null,"Para eliminar elementos de un arreglo utilizas el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"splice"),". Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = ["Pedro", "Germ\xe1n", "Diana"];\narray.splice(1, 1); // ["Pedro", "Diana"]\n')),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"splice")," recibe uno o dos argumentos cuando quieres eliminar elementos: el \xedndice del elemento que quieres eliminar y la cantidad de elementos a eliminar. Si omites el segundo argumento se eliminar\xe1n todos los elementos despu\xe9s del \xedndice que hayas especificado en el primer argumento. Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = ["Pedro", "Germ\xe1n", "Diana"];\narray.splice(0); // []\n')),(0,o.kt)("h2",{id:"encontrando-la-posici\xf3n-de-un-elemento"},"Encontrando la posici\xf3n de un elemento"),(0,o.kt)("p",null,"Para encontrar la primera posici\xf3n en la que aparece un elemento utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"indexOf"),". Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let array = [1, 2, 3, 2]\narray.indexOf(2) // 1\narray.indexOf(8) // -1\n")),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"indexOf")," recibe el valor del elemento y retorna la ",(0,o.kt)("strong",{parentName:"p"},"primera posici\xf3n")," en la que aparece. Si el valor no existe en el arreglo retorna -1."),(0,o.kt)("p",null,"Puedes pasar un segundo argumento con la posici\xf3n desde la que deseas empezar la b\xfasqueda. Por ejemplo, para buscar una 'a' desde la segunda posici\xf3n har\xedamos lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let array = ['a', 'b', 'c', 'a']\narray.indexOf('a', 1) // 3\n")),(0,o.kt)("h2",{id:"convirtiendo-a-un-string-cadena-de-texto"},"Convirtiendo a un string (cadena de texto)"),(0,o.kt)("p",null,"Utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"join")," para unir todos los elementos de un arreglo en una cadena de texto. Por defecto el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"join")," separa los elementos con una coma (,) pero puedes pasar cualquier otro separador como argumento. Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let array = [1, 2, 3]\narray.join() // "1,2,3"\narray.join("-") // "1-2-3"\n')),(0,o.kt)("h2",{id:"matrices"},"Matrices"),(0,o.kt)("p",null,"Los elementos de un arreglo pueden ser otros arreglos. De esta forma puedes modelar cuadr\xedculas (p.e. un teclado num\xe9rico, un tablero de ajedrez, una hoja de c\xe1lculo, etc.). A este tipo de estructura se le conoce como una ",(0,o.kt)("strong",{parentName:"p"},"matriz"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"let matrix = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n")),(0,o.kt)("p",null,"Para acceder a los elementos internos de una matriz puedes pensar en filas y columnas. Por ejemplo, en nuestra matriz de ejemplo el 1 se encuentra en la fila 0 y columna 0. El 9 se encuentra en la fila 2, columna 2:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"matrix[0][0] // 1\nmatrix[0][1] // 2\nmatrix[0][3] // 3\nmatrix[1][0] // 4\nmatrix[1][1] // 5\nmatrix[1][2] // 6\nmatrix[2][0] // 7\nmatrix[2][1] // 8\nmatrix[2][2] // 9\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Nota:")," Recuerda que la matriz es un arreglo de arreglos, as\xed que el primer ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),' se utilizar para obtener alguna de las "filas" (los arreglos internos) y el segundo ',(0,o.kt)("inlineCode",{parentName:"p"},"[]")," para obtener el n\xfamero del arreglo interno."),(0,o.kt)("p",null,"Para recorrer un arreglo de arreglos necesitamos dos ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),', uno dentro de otro, el primer arreglo recorre las "filas" y el segundo las "columnas":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"for (let i=0; i < matrix.length; i++) {\n  for (let j=0; j < matrix[i].length; j++) {\n    console.log(matrix[i][j])\n  }\n}\n")))}m.isMDXComponent=!0}}]);