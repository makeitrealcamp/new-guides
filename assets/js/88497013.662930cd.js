"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[842],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>g});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),p=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},d=function(e){var a=p(e.components);return r.createElement(s.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=t,g=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(g,i(i({ref:a},d),{},{components:n})):r.createElement(g,i({ref:a},d))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[c]="string"==typeof e?e:t,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2184:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),t=(n(7294),n(3905));const o={},i="Env\xedo de Correos",l={unversionedId:"nodejs/express/avanzado/envio-de-correos",id:"nodejs/express/avanzado/envio-de-correos",title:"Env\xedo de Correos",description:"Para enviar correos electr\xf3nicos desde nuestras aplicaciones necesitamos un proveedor como SendGrid, MailGun o Gmail (no recomendado para producci\xf3n), entre otros.",source:"@site/docs/nodejs/express/avanzado/envio-de-correos.md",sourceDirName:"nodejs/express/avanzado",slug:"/nodejs/express/avanzado/envio-de-correos",permalink:"/docs/nodejs/express/avanzado/envio-de-correos",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/nodejs/express/avanzado/envio-de-correos.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Autenticaci\xf3n",permalink:"/docs/nodejs/express/avanzado/autenticacion"},next:{title:"Carga de Im\xe1genes",permalink:"/docs/nodejs/express/avanzado/carga-de-imagenes"}},s={},p=[{value:"Nodemailer",id:"nodemailer",level:2},{value:"Utilizando el transporte de Sendgrid",id:"utilizando-el-transporte-de-sendgrid",level:3},{value:"Plantillas",id:"plantillas",level:3},{value:"Archivos adjuntos",id:"archivos-adjuntos",level:3},{value:"SendGrid (librer\xeda oficial)",id:"sendgrid-librer\xeda-oficial",level:2},{value:"Correos programados",id:"correos-programados",level:3},{value:"Plantillas",id:"plantillas-1",level:3}],d={toc:p},c="wrapper";function m(e){let{components:a,...n}=e;return(0,t.kt)(c,(0,r.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"env\xedo-de-correos"},"Env\xedo de Correos"),(0,t.kt)("p",null,"Para enviar correos electr\xf3nicos desde nuestras aplicaciones necesitamos un proveedor como ",(0,t.kt)("a",{parentName:"p",href:"https://sendgrid.com/"},"SendGrid"),", ",(0,t.kt)("a",{parentName:"p",href:"https://www.mailgun.com/"},"MailGun")," o ",(0,t.kt)("a",{parentName:"p",href:"https://gmail.com/"},"Gmail")," (no recomendado para producci\xf3n), entre otros."),(0,t.kt)("p",null,"En esta gu\xeda vamos a ver c\xf3mo funciona ",(0,t.kt)("a",{parentName:"p",href:"https://nodemailer.com/"},"Nodemailer")," (la librer\xeda m\xe1s popular) utilizando ",(0,t.kt)("a",{parentName:"p",href:"https://sendgrid.com/"},"SendGrid")," como proveedor."),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," Para seguir esta gu\xeda vas a necesitar crear una cuenta en ",(0,t.kt)("a",{parentName:"p",href:"https://sendgrid.com/"},"SendGrid")," y crear un API Key."),(0,t.kt)("h2",{id:"nodemailer"},"Nodemailer"),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://nodemailer.com/"},"Nodemailer")," utiliza ",(0,t.kt)("a",{parentName:"p",href:"https://es.wikipedia.org/wiki/Protocolo_para_transferencia_simple_de_correo"},"SMTP (Simple Mail Transfer Protocol)")," para el env\xedo de correos y se puede utilizar con cualquier proveedor."),(0,t.kt)("p",null,"La ventaja de utilizar ",(0,t.kt)("a",{parentName:"p",href:"https://nodemailer.com/"},"Nodemailer")," es que es f\xe1cil cambiar de proveedor si es necesario. La desventaja es que no podemos utilizar las caracter\xedsticas adicionales que ofrecen algunos proveedores como plantillas y programaci\xf3n de correos, entre otros."),(0,t.kt)("p",null,"El primer paso para utilizar ",(0,t.kt)("a",{parentName:"p",href:"https://nodemailer.com/"},"Nodemailer")," es instalar la librer\xeda:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ npm install nodemailer\n")),(0,t.kt)("p",null,"El siguiente paso es requerirla, crear un transporte (depende del proveedor que se utilice) y despu\xe9s utilizar el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"sendMail")," para enviar el correo. En el siguiente ejemplo vamos a utilizar un transporte falso que simula el env\xedo del correo (ideal para desarrollo y pruebas):"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express")\nconst nodemailer = require("nodemailer")\n\nconst app = express()\n\napp.post("/sendEmail", async (req, res) => {\n  const transporter = await createFakeTransporter()\n\n  const email = await transporter.sendMail({\n    from: \'"Pedro Perez" <pedro@example.com>\',\n    to: "maria@example.com, juan@example.com",\n    subject: "Hola \u2714", // Asunto\n    text: "Hola Mundo", // Contenido plano (texto)\n    html: "<strong>Hola Mundo</strong>", // Contenido HTML\n  })\n\n  // Vista previa del correo (s\xf3lo para el transporte falso de pruebas)\n  console.log("Preview URL: %s", nodemailer.getTestMessageUrl(email))\n\n  res.json({ id: email.id })\n})\n\nasync function createFakeTransporter() {\n  let testAccount = await nodemailer.createTestAccount()\n\n  return nodemailer.createTransport({\n    host: "smtp.ethereal.email",\n    port: 587,\n    secure: false,\n    auth: {\n      user: testAccount.user,\n      pass: testAccount.pass,\n    },\n  })\n}\n\napp.listen(3000)\n')),(0,t.kt)("h3",{id:"utilizando-el-transporte-de-sendgrid"},"Utilizando el transporte de Sendgrid"),(0,t.kt)("p",null,"Para utilizar ",(0,t.kt)("a",{parentName:"p",href:"https://sendgrid.com/"},"SendGrid")," s\xf3lo debemos reemplazar el transporte. El primer paso es instalar la librer\xeda ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/sendgrid/nodemailer-sendgrid-transport"},(0,t.kt)("inlineCode",{parentName:"a"},"nodemailer-sendgrid-transport")),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ npm install nodemailer-sendgrid-transport\n")),(0,t.kt)("p",null,"Y ahora debemos crear el transporte para enviar el email modificando el c\xf3digo anterior:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"// ... requerir express y crear el app\nconst nodemailer = require(\"nodemailer\")\nconst sgTransport = require('nodemailer-sendgrid-transport');\n\napp.post(\"/sendEmail\", (req, res) => {\n  const transporter = await createSendGridTransporter()\n  const email = await transporter.sendMail(...)\n})\n\nasync function createSendGridTransporter() {\n  const options = {\n    auth: {\n      api_key: 'SENDGRID_API_KEY' // Reemplazar por el API KEY\n    }\n  }\n\n  return nodemailer.createTransport(sgTransport(options));\n}\n\n// ...\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," No publiques tu API Key en repositorios de Git p\xfablicos o SendGrid bloquear\xe1 tu cuenta para evitar usos indebidos. Utiliza alguna librer\xeda como ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/motdotla/dotenv"},(0,t.kt)("inlineCode",{parentName:"a"},"dotenv"))," y una variable de entorno para almacenarla."),(0,t.kt)("h3",{id:"plantillas"},"Plantillas"),(0,t.kt)("p",null,"Escribir todo el c\xf3digo HTML del email dentro de nuestro c\xf3digo puede ser muy engorroso. Existen varias soluciones de plantillas como ",(0,t.kt)("a",{parentName:"p",href:"https://handlebarsjs.com/"},"Handlebars")," que permiten separar el c\xf3digo HTML del JavaScript. Sin embargo, una soluci\xf3n simple es usar las plantillas literales de JavaScript en otro archivo que contenga todas las plantillas de nuestros correos."),(0,t.kt)("p",null,"Creemos un archivo llamado ",(0,t.kt)("inlineCode",{parentName:"p"},"templates.js")," que exporte funciones para cada una de las plantillas. Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"exports.welcomeEmail = function(name) {\n  return `\n    <h1>Hola ${name},</h1>\n    <p><strong>Bienvenido ...</strong></p>\n  `\n}\n\nexports.recoverPasswordEmail = function(token) {\n  // retorna el HTML de recuperar contrase\xf1a\n}\n")),(0,t.kt)("p",null,"Recuerda que todos los estilos CSS deben ser en l\xednea, es decir, dentro del atributo ",(0,t.kt)("inlineCode",{parentName:"p"},"style")," de cada elemento. Si quieres separar el CSS del HTML te recomendamos ",(0,t.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/inline-css"},"esta librer\xeda"),". Su uso est\xe1 por fuera del alcance de esta gu\xeda pero encontrar\xe1s varios ejemplos en el enlace."),(0,t.kt)("h3",{id:"archivos-adjuntos"},"Archivos adjuntos"),(0,t.kt)("p",null,"Para enviar archivos adjuntos desde Nodemailer s\xf3lo debes agregar la llave ",(0,t.kt)("inlineCode",{parentName:"p"},"attachments")," al mensaje con un arreglo de objetos. Cada objeto representa un archivo adjunto:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"let message = {\n  ...\n  attachments: [\n    { // podemo pasar un string\n      filename: 'text1.txt',\n      content: 'hello world!'\n    },\n    { // o la ruta de un archivo, entre otras opciones\n      path: '/path/to/file.txt'\n    }\n  ]\n}\n")),(0,t.kt)("p",null,"Para ver otras formas de adjuntar cada archivo y m\xe1s opciones te recomendamos ver ",(0,t.kt)("a",{parentName:"p",href:"https://nodemailer.com/message/attachments/"},"la documentaci\xf3n de Nodemailer"),"."),(0,t.kt)("h2",{id:"sendgrid-librer\xeda-oficial"},"SendGrid (librer\xeda oficial)"),(0,t.kt)("p",null,"Veamos ahora como enviar correos utilizando la ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/sendgrid/sendgrid-nodejs/tree/main/packages/mail"},"librer\xeda oficial de SendGrid"),". El primer paso es instalarla con el siguiente comando:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ npm install @sendgrid/mail\n")),(0,t.kt)("p",null,"Para enviar correos utilizamos el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"send"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const sgMail = require('@sendgrid/mail');\n\nsgMail.setApiKey('SENDGRID_API_KEY');\n\nasync function send() {\n  const msg = {\n    to: 'test@example.com',\n    from: 'test@example.com',\n    subject: 'El asunto del mensaje',\n    text: 'Contenido del mensaje como texto plano',\n    html: '<strong>Contenido del mensaje como HTML</strong>',\n  };\n\n  try {\n    await sgMail.send(msg)\n  } catch (error) {\n    console.error(error);\n\n    if (error.response) {\n      console.error(error.response.body)\n    }\n  }\n}\n\nsend()\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," No publiques tu API Key en repositorios de Git p\xfablicos o SendGrid bloquear\xe1 tu cuenta para evitar usos indebidos. Utiliza alguna librer\xeda como ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/motdotla/dotenv"},(0,t.kt)("inlineCode",{parentName:"a"},"dotenv"))," y una variable de entorno para almacenarla."),(0,t.kt)("h3",{id:"correos-programados"},"Correos programados"),(0,t.kt)("p",null,"Al utilizar la librer\xeda oficial de SendGrid podemos aprovechar funcionalidades \xfanicas como env\xedo de correos programados agregando la llave ",(0,t.kt)("inlineCode",{parentName:"p"},"send_at")," al mensaje. Por ejemplo, para enviar un correo 5 minutos en el futuro podemos agregar lo siguiente al construir el mensaje:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const time = Math.round((new Date()).getTime() / 1000) // UNIX Timestamp\nconst msg = {\n  // ... ver ejemplo anterior\n  send_at: time + 300 // 300 segundos = 5 minutos\n};\n")),(0,t.kt)("p",null,(0,t.kt)("strong",{parentName:"p"},"Nota:")," Actualmente SendGrid s\xf3lo permite programar correos hasta 72 horas en el futuro."),(0,t.kt)("h3",{id:"plantillas-1"},"Plantillas"),(0,t.kt)("p",null,"SendGrid ofrece una funcionalidad que permite crear plantillas con variables que se reemplazar\xe1n al hacer el env\xedo. Esto permite separar el dise\xf1o del c\xf3digo para que personas no t\xe9cnicas puedan modificar el texto o elementos gr\xe1ficos (utilizando un editor gr\xe1fico) sin necesidad de hacer cambios sobre el proyecto."),(0,t.kt)("p",null,"Para crear una plantilla accede a tu cuenta de ",(0,t.kt)("a",{parentName:"p",href:"https://sendgrid.com/"},"SendGrid en la Web")," e ingresa a la opci\xf3n ",(0,t.kt)("strong",{parentName:"p"},"Email API -> Dynamic Templates")," del men\xfa principal. Debes crear una plantilla asign\xe1ndole un nombre y despu\xe9s crear una primera versi\xf3n (puedes crear varias versiones de la misma plantilla)."),(0,t.kt)("p",null,"Para el contenido del correo puedes empezar a partir de alguno de los dise\xf1os predefinidos o desde cero. SendGrid incluye un editor gr\xe1fico pero tambi\xe9n puedes manipular el HTML y CSS directamente si es necesario."),(0,t.kt)("p",null,"Las variables se insertan con doble corchete (",(0,t.kt)("inlineCode",{parentName:"p"},"{{ }}"),"), por ejemplo, ",(0,t.kt)("inlineCode",{parentName:"p"},"{{name}}")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"{{credits}}")," dentro del texto del correo."),(0,t.kt)("p",null,"Cada plantilla tiene un identificador \xfanico que se debe incluir al enviar el correo. "),(0,t.kt)("p",null,"Por ejemplo, asumiendo que tenemos una plantilla con identificador ",(0,t.kt)("inlineCode",{parentName:"p"},"d-12345")," con dos variables ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"credits"),", podr\xedamos utilizar el siguiente c\xf3digo para enviar un mensaje reemplazando la variable ",(0,t.kt)("inlineCode",{parentName:"p"},"name")," por ",(0,t.kt)("inlineCode",{parentName:"p"},"Pedro Perez")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"credits")," por ",(0,t.kt)("inlineCode",{parentName:"p"},"15000"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const sgMail = require('@sendgrid/mail');\n\nsgMail.setApiKey('SENDGRID_API_KEY');\n\nasync function send() {\n  try {\n    const msg = {\n      from: 'test@example.com',\n      personalizations: [\n        {\n          to: 'test@example.com',\n          dynamic_template_data: {\n            name: \"Pedro Perez\",\n            credits: 15000\n          }    \n        }\n      ],\n      template_id: \"d-12345\",\n    };\n    \n    await sgMail.send(msg)\n  } catch (error)\xa0{\n    console.error(error);\n\n    if (error.response) {\n      console.error(error.response.body)\n    }\n  } \n}\n\nsend()\n")),(0,t.kt)("p",null,"En este ejemplo tenemos una llave ",(0,t.kt)("inlineCode",{parentName:"p"},"personalizations")," donde vamos a incluir el valor de las variables para cada destinatario en la llave ",(0,t.kt)("inlineCode",{parentName:"p"},"dynamic_template_data"),". F\xedjate tambi\xe9n en la llave ",(0,t.kt)("inlineCode",{parentName:"p"},"template_id")," que se debe reemplazar con el verdadero identificador de la plantilla que se quiera usar."))}m.isMDXComponent=!0}}]);