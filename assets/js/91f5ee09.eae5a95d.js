"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[1171],{3905:(e,a,n)=>{n.d(a,{Zo:()=>m,kt:()=>g});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=r.createContext({}),p=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},m=function(e){var a=p(e.components);return r.createElement(s.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},c=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(n),c=t,g=u["".concat(s,".").concat(c)]||u[c]||d[c]||i;return n?r.createElement(g,o(o({ref:a},m),{},{components:n})):r.createElement(g,o({ref:a},m))}));function g(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[u]="string"==typeof e?e:t,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4980:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),t=(n(7294),n(3905));const i={},o="Carga de Im\xe1genes",l={unversionedId:"nodejs/express/avanzado/carga-de-imagenes",id:"nodejs/express/avanzado/carga-de-imagenes",title:"Carga de Im\xe1genes",description:"Express.js no permite cargar archivos directamente, as\xed que necesitamos usar una librer\xeda llamada multer.",source:"@site/docs/nodejs/express/avanzado/carga-de-imagenes.md",sourceDirName:"nodejs/express/avanzado",slug:"/nodejs/express/avanzado/carga-de-imagenes",permalink:"/docs/nodejs/express/avanzado/carga-de-imagenes",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/nodejs/express/avanzado/carga-de-imagenes.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Env\xedo de Correos",permalink:"/docs/nodejs/express/avanzado/envio-de-correos"},next:{title:"Mongoose",permalink:"/docs/nodejs/express/avanzado/mongoose"}},s={},p=[{value:"Validaciones",id:"validaciones",level:2},{value:"Colisiones de nombres",id:"colisiones-de-nombres",level:2},{value:"Cargar m\xfaltiples im\xe1genes",id:"cargar-m\xfaltiples-im\xe1genes",level:2},{value:"Modificar el tama\xf1o de las im\xe1genes",id:"modificar-el-tama\xf1o-de-las-im\xe1genes",level:2}],m={toc:p},u="wrapper";function d(e){let{components:a,...n}=e;return(0,t.kt)(u,(0,r.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"carga-de-im\xe1genes"},"Carga de Im\xe1genes"),(0,t.kt)("p",null,"Express.js no permite cargar archivos directamente, as\xed que necesitamos usar una librer\xeda llamada ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/expressjs/multer"},"multer"),"."),(0,t.kt)("p",null,"Como siempre, el primer paso es agregar la librer\xeda:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ yarn add multer\n")),(0,t.kt)("p",null,"El siguiente paso es configurar la librer\xeda en nuestro c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst multer  = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\nconst app = express();\n\napp.post('/profile', upload.single('avatar'), (req, res) => {\n  // req.file es el archivo 'avatar', el nombre original se puede obtener\n  // con req.file.originalname\n});\n\n...\n")),(0,t.kt)("p",null,"En la l\xednea 3 estamos configurando ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/expressjs/multer"},"multer")," para que las im\xe1genes queden almacenadas en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"uploads"),". En la l\xednea 7 estamos creando la ruta ",(0,t.kt)("inlineCode",{parentName:"p"},"/profile")," y como segundo par\xe1metro le estamos pasando el ",(0,t.kt)("strong",{parentName:"p"},"middleware")," de ",(0,t.kt)("strong",{parentName:"p"},"multer")," que va a recibir la imagen del formulario y guardarla en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"uploads"),"."),(0,t.kt)("p",null,"El formulario ser\xeda el siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-html"},'<form action="/profile" method="post" enctype="multipart/form-data">\n  <input type="file" name="avatar">\n  <input type="submit" value="Enviar">\n</form>\n')),(0,t.kt)("p",null,"En la primera l\xednea estamos definiendo la ruta ",(0,t.kt)("inlineCode",{parentName:"p"},"/profile")," con el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"POST"),". Tambi\xe9n definimos un formato llamado ",(0,t.kt)("inlineCode",{parentName:"p"},"multipart/form-data"),", que nos permite enviar uno o m\xe1s archivos junto a otra informaci\xf3n del formulario. Sin esta \xfaltima opci\xf3n la carga de archivos no funcionar\xeda."),(0,t.kt)("p",null,"En la segunda l\xednea estamos definiendo el campo de tipo archivo que se va a utilizar para cargar la imagen."),(0,t.kt)("h2",{id:"validaciones"},"Validaciones"),(0,t.kt)("p",null,"Para validar que s\xf3lo puedan cargar im\xe1genes podemos agregarle una opci\xf3n a la configuraci\xf3n de multer:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"...\nconst upload = multer({\n  dest: 'uploads/',\n  fileFilter(req, file, next) {\n    const isPhoto = file.mimetype.startsWith('image/');\n    if (isPhoto) {\n      next(null, true);\n    } else {\n      next({ message: \"El tipo de archivo no es v\xe1lido\" }, false);\n    }\n  }\n});\n")),(0,t.kt)("p",null,"Tambi\xe9n es conveniente agregar la siguiente validaci\xf3n al campo de tipo archivo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-html"},'<input type="file" name="avatar" accept="image/gif, image/png, image/jpeg">\n')),(0,t.kt)("p",null,"De esa forma el usuario no va a poder seleccionar archivos que no sean im\xe1genes en el formulario. Sin embargo, la validaci\xf3n en el servidor es necesaria porque alguien podr\xeda modificar el formulario y enviar otro tipo de archivos."),(0,t.kt)("p",null,"Tambi\xe9n es posible limitar el tama\xf1o del archivo con la opci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"fileSize"),", que recibe el n\xfamero m\xe1ximo de bytes que puede tener el archivo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const upload = multer({\n  ...,\n  fileSize: 1000000 // 1MB\n});\n")),(0,t.kt)("h2",{id:"colisiones-de-nombres"},"Colisiones de nombres"),(0,t.kt)("p",null,"Si dos usuarios suben im\xe1genes con el mismo nombre la primera imagen se va a sobrescribir. Para evitar ese problema es buena pr\xe1ctica generar nombre de archivos \xfanicos con un paquete llamado ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/kelektiv/node-uuid"},"uuid"),"."),(0,t.kt)("p",null,"El primer paso es agregar la librer\xeda:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ yarn add uuid\n")),(0,t.kt)("p",null,"Ahora debemos modificar el c\xf3digo para cambiar el nombre de las im\xe1genes:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst multer  = require('multer');\nconst path = require(\"path\");\nconst uuid = require(\"uuid\");\n\nconst app = express();\n\nconst storage = multer.diskStorage({\n  destination(req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename(req, file, cb) {\n    cb(null, uuid.v4() + path.extname(file.originalname));\n  }\n});\nconst upload = multer({\n  storage: storage\n});\n\napp.post('/profile', upload.single('avatar'), function (req, res, next) {\n  // ...\n});\n")),(0,t.kt)("p",null,"En la l\xednea 8 estamos definiendo el tipo de almacenamiento que vamos a utilizar para las im\xe1genes, en este caso una carpeta en el disco duro, y definimos dos m\xe9todos: ",(0,t.kt)("inlineCode",{parentName:"p"},"destination")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"filename"),". ",(0,t.kt)("inlineCode",{parentName:"p"},"destination")," se utiliza para definir el nombre de la carpeta, y ",(0,t.kt)("inlineCode",{parentName:"p"},"filename")," para definir el nombre del archivo, ah\xed es donde utilizamos la librer\xeda uuid para generar un nombre \xfanico."),(0,t.kt)("h2",{id:"cargar-m\xfaltiples-im\xe1genes"},"Cargar m\xfaltiples im\xe1genes"),(0,t.kt)("p",null,"Hasta ahora hemos visto c\xf3mo cargar una \xfanica imagen. Sin embargo ",(0,t.kt)("strong",{parentName:"p"},"multer")," tambi\xe9n permite cargar varias im\xe1genes a la vez."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"app.post('/profile', upload.array('photos'), (req, res) => {\n  // las im\xe1genes est\xe1n en req.files (es un arreglo)\n});\n")),(0,t.kt)("h2",{id:"modificar-el-tama\xf1o-de-las-im\xe1genes"},"Modificar el tama\xf1o de las im\xe1genes"),(0,t.kt)("p",null,"No es buena idea utilizar las im\xe1genes originales que suben los usuarios porque podr\xedan ser muy pesadas. Es mejor modificar su tama\xf1o para garantizar que no pesen m\xe1s de lo necesario."),(0,t.kt)("p",null,"Para eso vamos a utilizar una librer\xeda llamada ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/oliver-moran/jimp"},"Jimp")," que nos va a permitir redimensionar las im\xe1genes."),(0,t.kt)("p",null,"El primer paso es agregar la librer\xeda:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ yarn add jimp\n")),(0,t.kt)("p",null,"Ahora debemos configurar ",(0,t.kt)("strong",{parentName:"p"},"Jimp")," en nuestro c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"const express = require('express');\nconst multer  = require('multer');\n\nconst app = express();\n\nconst uploader = multer(...);\n\n// este es el middleware que va a redimensionar la imagen\nconst resize = async (req, res, next) => {\n  if (!req.file) {\n    next();\n    return;\n  }\n\n  const photo = await jimp.read(req.file.path);\n  await photo.resize(1024, jimp.AUTO);\n  await photo.write(`uploads/big/${req.file.filename}`);\n\n  next();\n};\n\n// debemos configurar el middleware en la ruta\napp.post('/profile', uploader.single('avatar'), resize, (req, res) => {\n  // req.file es el archivo 'avatar', el nombre original se puede obtener\n  // con req.file.originalname\n});\n")),(0,t.kt)("p",null,"F\xedjate c\xf3mo estamos definiendo el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"resize"),", que realmente es un middleware que vamos a configurar en la ruta ",(0,t.kt)("inlineCode",{parentName:"p"},"POST /profile")," que recibe la imagen. Ese m\xe9todo lee el archivo, lo redimensiona y guarda en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"uploads/big/"),". Para ver todas las opciones de Jimp consulta ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/oliver-moran/jimp"},"la documentaci\xf3n"),"."))}d.isMDXComponent=!0}}]);