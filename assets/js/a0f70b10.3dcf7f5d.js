"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[9873],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>f});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var c=r.createContext({}),l=function(e){var a=r.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},p=function(e){var a=l(e.components);return r.createElement(c.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=t,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||s;return n?r.createElement(f,o(o({ref:a},p),{},{components:n})):r.createElement(f,o({ref:a},p))}));function f(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var s=n.length,o=new Array(s);o[0]=m;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[u]="string"==typeof e?e:t,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2324:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),t=(n(7294),n(3905));const s={},o="Autenticaci\xf3n",i={unversionedId:"nodejs/express/avanzado/autenticacion",id:"nodejs/express/avanzado/autenticacion",title:"Autenticaci\xf3n",description:"En este capitulo vamos a ver c\xf3mo almacenar las contrase\xf1as de los usuarios, y c\xf3mo identificar las peticiones HTTP.",source:"@site/docs/nodejs/express/avanzado/autenticacion.md",sourceDirName:"nodejs/express/avanzado",slug:"/nodejs/express/avanzado/autenticacion",permalink:"/docs/nodejs/express/avanzado/autenticacion",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/nodejs/express/avanzado/autenticacion.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Creando una Web API",permalink:"/docs/nodejs/express/avanzado/web-api"},next:{title:"Env\xedo de Correos",permalink:"/docs/nodejs/express/avanzado/envio-de-correos"}},c={},l=[{value:"Almacenando las contrase\xf1as",id:"almacenando-las-contrase\xf1as",level:2},{value:"Identificando las peticiones",id:"identificando-las-peticiones",level:2}],p={toc:l},u="wrapper";function d(e){let{components:a,...n}=e;return(0,t.kt)(u,(0,r.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"autenticaci\xf3n"},"Autenticaci\xf3n"),(0,t.kt)("p",null,"En este capitulo vamos a ver c\xf3mo almacenar las contrase\xf1as de los usuarios, y c\xf3mo identificar las peticiones HTTP."),(0,t.kt)("p",null,"Recuerda que HTTP es un protocolo sin estado, lo que quiere decir que el servidor Web no mantiene un registro de qui\xe9n est\xe1 visitando una p\xe1gina."),(0,t.kt)("h2",{id:"almacenando-las-contrase\xf1as"},"Almacenando las contrase\xf1as"),(0,t.kt)("p",null,"Para almacenar las contrase\xf1as en la base de datos se recomienda utilizar un paquete llamado ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/kelektiv/node.bcrypt.js"},"bcrypt")," para encriptar las contrase\xf1as."),(0,t.kt)("p",null,"El primer paso es instalar el paquete con npm o Yarn. Por ejemplo con Yarn:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"$ yarn add bcrypt\n")),(0,t.kt)("p",null,"Para encriptar una contrase\xf1a utiliza el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"hash"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},"let bcrypt = require('bcrypt');\n\nbcrypt.hash(\"alguna-contrase\xf1a\", 10).then(function(hash) {\n  // almacena la contrase\xf1a en la base de datos\n})\n")),(0,t.kt)("p",null,"Para verificar si una contrase\xf1a es correcta utiliza el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"compare"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'bcrypt.compare("alguna-contrase\xf1a", hash).then(function(res) {\n  // res == true\n});\n\nbcrypt.compare("otra-contrase\xf1a", hash).then(function(res) {\n  // res == false\n});\n')),(0,t.kt)("h2",{id:"identificando-las-peticiones"},"Identificando las peticiones"),(0,t.kt)("p",null,"Para identificar las peticiones debemos guardar el ",(0,t.kt)("inlineCode",{parentName:"p"},"id")," del usuario en la ",(0,t.kt)("strong",{parentName:"p"},"sesi\xf3n")," cuando este se autentique."),(0,t.kt)("p",null,"El primer paso es asegurarte que hayas instalado y configurado la librer\xeda  ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/expressjs/cookie-session"},"cookie-session")," como se muestra en el cap\xedtulo de ",(0,t.kt)("a",{parentName:"p",href:"/docs/nodejs/express/cookies-y-sesion"},"Cookies y sesi\xf3n de Express"),"."),(0,t.kt)("p",null,"El siguiente paso es agregar el ",(0,t.kt)("inlineCode",{parentName:"p"},"id")," del usuario a la ",(0,t.kt)("strong",{parentName:"p"},"sesi\xf3n"),". Por ejemplo, si tu ruta de autenticaci\xf3n es ",(0,t.kt)("inlineCode",{parentName:"p"},"POST /login")," y si est\xe1s utilizando ",(0,t.kt)("a",{parentName:"p",href:"http://mongoosejs.com/"},"Mongoose"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'app.post("/login", function(req, res) {\n  const email = req.body.email;\n  const password = req.body.password;\n\n  try {\n    const user = await User.authenticate(email, password);\n    if (user) {\n      req.session.userId = user._id; // ac\xe1 guardamos el id en la sesi\xf3n\n      return res.redirect("/");\n    } else {\n      res.render("/login", { error: "Wrong email or password. Try again!" });\n    }\n  } catch (e) {\n    return next(e);\n  }\n});\n')),(0,t.kt)("p",null,"El m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"authenticate")," del modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"User")," ser\xeda el siguiente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'const UserSchema = new mongoose.Schema({ // ... });\n\nUserSchema.statics.authenticate = async (email, password) => {\n  // buscamos el usuario utilizando el email\n  const user = await mongoose.model("User").findOne({ email: email });\n\n  if (user) {\n    // si existe comparamos la contrase\xf1a\n    return new Promise((resolve, reject) => {\n      bcrypt.compare(password, user.password, (err, result) => {\n        if (err) reject(err);\n        resolve(result === true ? user : null);\n      });\n    });\n    return user;\n  }\n\n  return null;\n};\n')),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"https://github.com/kelektiv/node.bcrypt.js"},"bcrypt")," no soporta a\xfan ",(0,t.kt)("inlineCode",{parentName:"p"},"async/await")," as\xed que en la l\xednea 9 estamos envolviendo el c\xf3digo que hace la verificaci\xf3n en una ",(0,t.kt)("strong",{parentName:"p"},"promesa"),"."),(0,t.kt)("p",null,"Por \xfaltimo, para identificar las peticiones HTTP creamos un ",(0,t.kt)("strong",{parentName:"p"},"middleware")," que verifica si la sesi\xf3n tiene un ",(0,t.kt)("inlineCode",{parentName:"p"},"userId")," y carga al usuario:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'const requireUser = async (req, res, next) => {\n  const userId = req.session.userId;\n  if (userId) {\n    const user = await User.findOne({ _id: userId });\n    res.locals.user = user;\n    next();\n  } else {\n    return res.redirect("/login");\n  }\n}\n')),(0,t.kt)("p",null,"Ahora, en todas las rutas que requieran autenticaci\xf3n podemos agregar este ",(0,t.kt)("strong",{parentName:"p"},"middleware"),". Por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-javascript"},'app.get("/", requireUser, (req, res) => {\n  res.render("index");\n});\n')),(0,t.kt)("p",null,"Para ver un ejemplo completo de autenticaci\xf3n de usuarios con ",(0,t.kt)("strong",{parentName:"p"},"Express.js")," y ",(0,t.kt)("strong",{parentName:"p"},"MongoDB")," te recomendamos ver la aplicaci\xf3n que se encuentra en ",(0,t.kt)("a",{parentName:"p",href:"https://github.com/makeitrealcamp/node-auth-example"},"este repositorio de Github"),"."))}d.isMDXComponent=!0}}]);