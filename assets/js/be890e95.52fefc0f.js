"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[5306],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>k});var t=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=t.createContext({}),p=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},d=function(e){var a=p(e.components);return t.createElement(s.Provider,{value:a},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=l,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||o;return n?t.createElement(k,r(r({ref:a},d),{},{components:n})):t.createElement(k,r({ref:a},d))}));function k(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var o=n.length,r=new Array(o);r[0]=c;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[m]="string"==typeof e?e:l,r[1]=i;for(var p=2;p<o;p++)r[p]=n[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2845:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=n(7462),l=(n(7294),n(3905));const o={},r="Condicionales",i={unversionedId:"javascript/condicionales",id:"javascript/condicionales",title:"Condicionales",description:"Hasta ahora hemos visto c\xf3digo que se ejecuta l\xednea a l\xednea, una detr\xe1s de otra. Pero a veces se hace necesario romper esa secuencia y crear ramas que nos permitan tomar diferentes caminos en el c\xf3digo dependiendo de ciertas condiciones.",source:"@site/docs/javascript/condicionales.md",sourceDirName:"javascript",slug:"/javascript/condicionales",permalink:"/docs/javascript/condicionales",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/condicionales.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Variables",permalink:"/docs/javascript/variables"},next:{title:"Ciclos",permalink:"/docs/javascript/ciclos"}},s={},p=[{value:"De lo contrario (else)",id:"de-lo-contrario-else",level:2},{value:"Condiciones anidadas",id:"condiciones-anidadas",level:2},{value:"De lo contrario, si (else if)",id:"de-lo-contrario-si-else-if",level:2},{value:"Condiciones compuestas",id:"condiciones-compuestas",level:2},{value:"Operador condicional (ternario)",id:"operador-condicional-ternario",level:2},{value:"Pensando como un programador",id:"pensando-como-un-programador",level:2},{value:"Evaluando expresiones booleanas",id:"evaluando-expresiones-booleanas",level:2}],d={toc:p},m="wrapper";function u(e){let{components:a,...n}=e;return(0,l.kt)(m,(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"condicionales"},"Condicionales"),(0,l.kt)("p",null,"Hasta ahora hemos visto c\xf3digo que se ejecuta l\xednea a l\xednea, una detr\xe1s de otra. Pero a veces se hace necesario romper esa secuencia y crear ramas que nos permitan tomar diferentes caminos en el c\xf3digo dependiendo de ciertas condiciones."),(0,l.kt)("p",null,"Por ejemplo, imagina c\xf3mo podr\xedamos hacer un programa que nos diga si un n\xfamero es mayor o menor a diez. Si es mayor a 10 deber\xeda imprimir una cosa, pero si es menor deber\xeda imprimir otra."),(0,l.kt)("p",null,"A este concepto se le conoce como condicionales y su sintaxis es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"if (<condici\xf3n>) {\n  // c\xf3digo que se ejecuta si se cumple la condici\xf3n\n}\n")),(0,l.kt)("p",null,"La condici\xf3n puede ser cualquier expresi\xf3n que eval\xfaa a verdadero ","(",(0,l.kt)("inlineCode",{parentName:"p"},"true"),")"," o falso ","(",(0,l.kt)("inlineCode",{parentName:"p"},"false"),")",". Crea un archivo llamado ",(0,l.kt)("inlineCode",{parentName:"p"},"conditionals.js")," y agrega el siguiente contenido:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'if (true) {\n  console.log("Hola Mundo");\n}\n')),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Nota"),": Las l\xedneas que terminan con un corchete ","(",(0,l.kt)("inlineCode",{parentName:"p"},"{")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"}"),")"," no se les agrega punto y coma ","(",";",")","."),(0,l.kt)("p",null,"Ejec\xfata el archivo desde la consola, deber\xedas ver lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"$ node conditionals.js\nHola Mundo\n")),(0,l.kt)("p",null,"No importa cu\xe1ntas veces ejecutes este archivo, el resultado siempre ser\xe1 el mismo."),(0,l.kt)("p",null,"Ahora probemos con falso ","(",(0,l.kt)("inlineCode",{parentName:"p"},"false"),")"," en vez de verdadero ","(",(0,l.kt)("inlineCode",{parentName:"p"},"true"),")",":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'if (false) {\n  console.log("Hola Mundo");\n}\n')),(0,l.kt)("p",null,"Ejec\xfatalo. Esta vez ",(0,l.kt)("strong",{parentName:"p"},"nunca"),' deber\xeda imprimir "Hola mundo", no importa cuantas veces lo ejecutes.'),(0,l.kt)("p",null,"En vez de utilizar ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," como condici\xf3n, podemos utilizar una expresi\xf3n ",(0,l.kt)("strong",{parentName:"p"},"que eval\xfae a "),(0,l.kt)("inlineCode",{parentName:"p"},"true"),(0,l.kt)("strong",{parentName:"p"}," o "),(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'if (1 == 1) {\n  console.log("Hola Mundo");\n}\n')),(0,l.kt)("p",null,"El resultado al ejecutarlo deber\xeda ser:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"$ node conditionals.js\nHola mundo\n")),(0,l.kt)("p",null,"Prueba ahora con ",(0,l.kt)("inlineCode",{parentName:"p"},"1 == 2"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"1 < 6")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"8 < 6")," en la condici\xf3n y f\xedjate que tenga sentido."),(0,l.kt)("p",null,"Ahora que ya sabes c\xf3mo funciona los condicionales ","(","muchos los llamamos los ifs",")"," crea un programa en un archivo llamado ",(0,l.kt)("inlineCode",{parentName:"p"},"number.js"),' que imprima "El n\xfamero es menor a 10" solo si el n\xfamero que est\xe1 almacenado en la variable ',(0,l.kt)("inlineCode",{parentName:"p"},"num")," es menor a 10:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 8;\n\nif (num < 10) {\n  console.log("El n\xfamero es menor a 10");\n}\n')),(0,l.kt)("p",null,"Si lo ejecutas te deber\xeda aparecer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"$ node number.js\nEl n\xfamero es menor a 10\n")),(0,l.kt)("p",null,'Ahora vamos a modificar el programa para que, adem\xe1s de imprimir "El n\xfamero es menor a 10" si el n\xfamero es menor a 10, tambi\xe9n imprima "El n\xfamero es igual o mayor a 10" si el n\xfamero es igual o mayor a 10. Podemos utilizar otro condicional debajo del que ya ten\xedamos:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 8;\n\nif (num < 10) {\n  console.log("El n\xfamero es menor a 10");\n}\n\nif (num >= 10) {\n  console.log("El n\xfamero es igual o mayor a 10");\n}\n')),(0,l.kt)("p",null,"Ejecuta el programa e ingresa un n\xfamero menor a 10, despu\xe9s un n\xfamero mayor a 10, y por \xfaltimo 10. Verifica que el resultado sea el esperado."),(0,l.kt)("h2",{id:"de-lo-contrario-else"},"De lo contrario ","(","else",")"),(0,l.kt)("p",null,"Lo \xfanico que necesitas para hacer condicionales es el ",(0,l.kt)("inlineCode",{parentName:"p"},"if"),". Pero existen dos atajos que te van a permitir escribir c\xf3digo m\xe1s corto."),(0,l.kt)("p",null,"El primer atajo es el ",(0,l.kt)("inlineCode",{parentName:"p"},"else"),', que significa "de lo contrario" en Ingl\xe9s. El ',(0,l.kt)("inlineCode",{parentName:"p"},"else")," nos permite definir el c\xf3digo que se debe ejecutar si el ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," no se cumple, es decir si la condici\xf3n eval\xfaa a falso. La sintaxis es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"if (<condici\xf3n>) {\n  // c\xf3digo que se ejecuta si se cumple la condici\xf3n\n} else {\n  // c\xf3digo que se ejecuta si NO se cumple la condici\xf3n\n}\n")),(0,l.kt)("p",null,"Podemos modificar el programa anterior, que nos dice si el n\xfamero almacenado en la variable ",(0,l.kt)("inlineCode",{parentName:"p"},"num")," es menor a 10, o si es mayor o igual, con un ",(0,l.kt)("inlineCode",{parentName:"p"},"else"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 8;\n\nif (num < 10) {\n  console.log("El n\xfamero es menor a 10");\n} else {\n  console.log("El n\xfamero es igual o mayor a 10");\n}\n')),(0,l.kt)("p",null,"M\xe1s corto y si lo ejecutas deber\xeda funcionar igual."),(0,l.kt)("h2",{id:"condiciones-anidadas"},"Condiciones anidadas"),(0,l.kt)("p",null,'Ahora imagina que queremos modificar este programa para que en vez de imprimir "El n\xfamero es igual o mayor a 10", imprima "El n\xfamero es igual a 10" o "El n\xfamero es mayor a 10" dependiendo si el n\xfamero es igual 10 o mayor a 10 respectivamente.'),(0,l.kt)("p",null,"En JavaScript ","(","y en la mayor\xeda de lenguajes de programaci\xf3n",")"," es posible anidar condicionales, as\xed que una posible soluci\xf3n ser\xeda la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 8;\n\nif (num < 10) {\n  console.log("El n\xfamero es menor a 10");\n} else {\n  if (num > 10) {\n    console.log("El n\xfamero es mayor a 10");\n  } else {\n    console.log("El n\xfamero es igual a 10");\n  }\n}\n')),(0,l.kt)("p",null,'Pr\xfaebalo con un n\xfamero menor a 10, otro mayor a 10 y con 10. Te deber\xeda aparecer "El n\xfamero es menor a 10", "El n\xfamero es mayor a 10" y "El n\xfamero es igual a 10" respectivamente.'),(0,l.kt)("h2",{id:"de-lo-contrario-si-else-if"},"De lo contrario, si ","(","else if",")"),(0,l.kt)("p",null,"En general, es preferible no tener que anidar condicionales porque son dif\xedciles de leer y entender. Otro atajo que nos ofrece JavaScript para los condicionales es el ",(0,l.kt)("inlineCode",{parentName:"p"},"else if"),', que significa "De lo contrario, si ..." en Ingl\xe9s. La sintaxis es la siguiente:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"if (<primera condici\xf3n>) {\n  // c\xf3digo que se ejecuta si <primera condici\xf3n> se cumple\n} else if (<segunda condici\xf3n>) {\n  // c\xf3digo si <primera condici\xf3n> NO se cumple, pero <segunda condici\xf3n> se cumple\n} else if (<tercera condici\xf3n>) {\n  // c\xf3digo si <primera condici\xf3n> y <segunda condici\xf3n> NO se cumplen, pero <tercera condici\xf3n> s\xed se cumple\n} else {\n  // c\xf3digo si ninguna de las condiciones se cumple\n}\n")),(0,l.kt)("p",null,"Puedes definir tantos ",(0,l.kt)("inlineCode",{parentName:"p"},"else if")," como desees. El ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," es opcional."),(0,l.kt)("p",null,"Modifiquemos nuestro ejemplo anterior y en vez de utilizar condiciones anidadas, utilicemos ",(0,l.kt)("inlineCode",{parentName:"p"},"else if"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 8;\n\nif (num < 10) {\n  console.log("El n\xfamero es menor a 10");\n} else if (num > 10) {\n  console.log("El n\xfamero es mayor a 10");\n} else {\n  console.log("El n\xfamero es igual a 10");\n}\n')),(0,l.kt)("p",null,"Lo m\xe1s importante de entender en este c\xf3digo es que el programa s\xf3lo va a entrar a ",(0,l.kt)("strong",{parentName:"p"},"una")," de estas ramas. Por ning\xfan motivo va a entrar a dos de ellas. Si la condici\xf3n del primer ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," se cumple, el programa ejecuta el c\xf3digo que est\xe9 en ese bloque y despu\xe9s ",(0,l.kt)("strong",{parentName:"p"},"salta")," hasta despu\xe9s del ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," para continuar con el resto del programa o terminar."),(0,l.kt)("p",null,"Si la condici\xf3n del primer ",(0,l.kt)("inlineCode",{parentName:"p"},"if")," no se cumple, pero la del ",(0,l.kt)("inlineCode",{parentName:"p"},"else if")," s\xed se cumple, el programa ejecuta el c\xf3digo de ese bloque y ",(0,l.kt)("strong",{parentName:"p"},"salta")," hasta despu\xe9s del ",(0,l.kt)("inlineCode",{parentName:"p"},"else")," para continuar con el resto del programa o terminar."),(0,l.kt)("h2",{id:"condiciones-compuestas"},"Condiciones compuestas"),(0,l.kt)("p",null,'Imagina que queremos escribir un programa que imprima "El n\xfamero est\xe1 entre 10 y 20" si el valor de una variable est\xe1 efectivamente entre 10 y 20. \xbfC\xf3mo te imaginas que lo podr\xedamos solucionar?'),(0,l.kt)("p",null,"Una opci\xf3n es usar condiciones anidadas, de esta forma:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 15;\n\nif (num >= 10) {\n  if (num <= 20) {\n    console.log("El n\xfamero est\xe1 entre 10 y 20");\n  }\n}\n')),(0,l.kt)("p",null,"Sin embargo, c\xf3mo dec\xedamos antes, leer condiciones anidadas es dif\xedcil y, en lo posible, es mejor evitarlas. En cambio, podemos utilizar los operadores l\xf3gicos ",(0,l.kt)("strong",{parentName:"p"},"y")," ","(",(0,l.kt)("inlineCode",{parentName:"p"},"&&"),")"," y ",(0,l.kt)("strong",{parentName:"p"},"\xf3")," ","(",(0,l.kt)("inlineCode",{parentName:"p"},"||"),")"," para crear condiciones compuestas. El ejemplo anterior lo podemos mejorar con ",(0,l.kt)("strong",{parentName:"p"},"y"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let num = 15;\n\nif (num >= 10 && num <= 20) {\n  console.log("El n\xfamero est\xe1 entre 10 y 20");\n}\n')),(0,l.kt)("p",null,"Lo que estamos diciendo con este c\xf3digo es: si el n\xfamero es ",(0,l.kt)("strong",{parentName:"p"},"mayor o igual a 10 y menor o igual 20"),' entonces imprima "El n\xfamero est\xe1 entre 10 y 20". F\xedjate que a cada lado del ',(0,l.kt)("inlineCode",{parentName:"p"},"&&")," hay una expresi\xf3n que eval\xfaa a verdadero o falso: ",(0,l.kt)("inlineCode",{parentName:"p"},"num >= 10")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"num <= 20"),"."),(0,l.kt)("p",null,'Imagina ahora que necesitamos escribir un programa que imprima "Excelente elecci\xf3n" cuando el valor de una variable sea "rojo" ',(0,l.kt)("strong",{parentName:"p"},"o"),' "negro" \xfanicamente:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let color = "negro";\n\nif (color === "rojo" || color === "negro") {\n  console.log("Excelente elecci\xf3n");\n}\n')),(0,l.kt)("h2",{id:"operador-condicional-ternario"},"Operador condicional ","(","ternario",")"),(0,l.kt)("p",null,"Los operadores ternarios se utilizan con frecuencia como atajos para los condicionales ",(0,l.kt)("inlineCode",{parentName:"p"},"if"),". Este est\xe1 compuesto de la siguiente forma ",(0,l.kt)("inlineCode",{parentName:"p"},"<condici\xf3n> ? <expr1> : <expr2>"),". Ahora desglos\xe9moslo paso a paso para entender un poco mejor como funciona."),(0,l.kt)("p",null,"Lo primero que se est\xe1 haciendo y lo que esta antes de ",(0,l.kt)("inlineCode",{parentName:"p"},"?")," es la condici\xf3n que queremos validar; si esto es verdadero se ejecutara la ",(0,l.kt)("inlineCode",{parentName:"p"},"expr1")," de lo contrario se ejecutara la ",(0,l.kt)("inlineCode",{parentName:"p"},"expr2"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},"let num = 10;\n\nnum >= 15 ? console.log('Es mayor o igual que 15') : console.log('Es menor que 15');\n")),(0,l.kt)("h2",{id:"pensando-como-un-programador"},"Pensando como un programador"),(0,l.kt)("p",null,"Vamos a jugar un juego llamado ",(0,l.kt)("strong",{parentName:"p"},"Verdadero o Falso"),". Yo digo una afirmaci\xf3n y tu debes reponder si es verdadera o falsa. Trata de no mirar las respuestas debajo. Despu\xe9s comparas:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"La Tierra gira alrededor del sol. ","(","\xbfVerdadero o falso?",")"),(0,l.kt)("li",{parentName:"ol"},"Paris es la capital de Estados Unidos."),(0,l.kt)("li",{parentName:"ol"},"La Tierra gira alrededor del sol ",(0,l.kt)("strong",{parentName:"li"},"y")," los leones son animales."),(0,l.kt)("li",{parentName:"ol"},"Paris es la capital de Estados Unidos ",(0,l.kt)("strong",{parentName:"li"},"y")," los leones son animales."),(0,l.kt)("li",{parentName:"ol"},"La Tierra gira alrededor de Marte ",(0,l.kt)("strong",{parentName:"li"},"y")," los perros hablan Espa\xf1ol."),(0,l.kt)("li",{parentName:"ol"},"Los leones son animales ",(0,l.kt)("strong",{parentName:"li"},"o")," la Tierra gira alrededor del sol."),(0,l.kt)("li",{parentName:"ol"},"Paris es la capital de Estados Unidos ",(0,l.kt)("strong",{parentName:"li"},"o")," los leones son animales."),(0,l.kt)("li",{parentName:"ol"},"El planeta tierra gira alrededor de Marte ",(0,l.kt)("strong",{parentName:"li"},"o")," los perros hablan Espa\xf1ol.")),(0,l.kt)("p",null,"Las respuestas son las siguientes:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Verdadero."),(0,l.kt)("li",{parentName:"ol"},"Falso."),(0,l.kt)("li",{parentName:"ol"},"Verdadero."),(0,l.kt)("li",{parentName:"ol"},"Falso."),(0,l.kt)("li",{parentName:"ol"},"Falso."),(0,l.kt)("li",{parentName:"ol"},"Verdadero."),(0,l.kt)("li",{parentName:"ol"},"Verdadero."),(0,l.kt)("li",{parentName:"ol"},"Falso.")),(0,l.kt)("p",null,"Cuando utilizamos ",(0,l.kt)("strong",{parentName:"p"},"y")," las dos expresiones deben ser verdaderas para que el resultado sea verdadero. Cuando utilizamos ",(0,l.kt)("strong",{parentName:"p"},"o")," cualquiera de las dos expresiones puede ser verdadera para que el resultado sea verdadero."),(0,l.kt)("h2",{id:"evaluando-expresiones-booleanas"},"Evaluando expresiones booleanas"),(0,l.kt)("p",null,"Volvamos a jugar el juego, pero en vez de utilizar frases, utilicemos expresiones booleanas. Debes decidir si cada una de las siguientes expresiones es verdadera o falsa ","(",(0,l.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),")",":"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"true")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"1 < 1")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"2 != 3")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("inlineCode",{parentName:"li"},"1 < 1 && 2 != 3"))),(0,l.kt)("p",null,"Copia y pega cada expresi\xf3n en la consola de Node.js para conocer las respuestas."),(0,l.kt)("p",null,"Analicemos la \xfaltima expresi\xf3n: ",(0,l.kt)("inlineCode",{parentName:"p"},"1 < 1 && 2 != 3"),". \xbfC\xf3mo podemos saber si es verdadera o falsa?"),(0,l.kt)("p",null,"El primer paso es reemplazar cada lado de la expresi\xf3n. ",(0,l.kt)("inlineCode",{parentName:"p"},"1 < 1")," es ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"2 != 3")," es ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),". Quedar\xeda:"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"false && true")),(0,l.kt)("p",null,"Recuerda que para que una expresi\xf3n con ",(0,l.kt)("strong",{parentName:"p"},"y")," ","(",(0,l.kt)("inlineCode",{parentName:"p"},"&&"),")"," sea verdadera, cada lado ",(0,l.kt)("strong",{parentName:"p"},"tiene")," que ser verdadero. Sin embargo, podemos hacer una tabla con todas las combinaciones entre verdadero y falso que podamos usar como referencia m\xe1s adelante:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expresi\xf3n"),(0,l.kt)("th",{parentName:"tr",align:null},"Resultado"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true && true")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"true && false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false && true")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false && false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"false"))))),(0,l.kt)("p",null,"F\xedjate que el resultado solo es ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," cuando los dos lados del ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," son ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"Hagamos lo mismo para el ",(0,l.kt)("strong",{parentName:"p"},"\xf3")," ","(",(0,l.kt)("inlineCode",{parentName:"p"},"||"),")",":"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Expresi\xf3n"),(0,l.kt)("th",{parentName:"tr",align:null},"Resultado"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"`true"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"`true"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"`false"),(0,l.kt)("td",{parentName:"tr",align:null})),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"`false"),(0,l.kt)("td",{parentName:"tr",align:null})))),(0,l.kt)("p",null,"Con el ",(0,l.kt)("strong",{parentName:"p"},"\xf3")," cualquiera de los lados puede ser ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," para que el resultado sea ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"A estas tablas se les conoce como ",(0,l.kt)("strong",{parentName:"p"},"Tablas de Verdad"),"."),(0,l.kt)("p",null,"Hagamos algunos ejercicios. Decide si las siguientes expresiones eval\xfaan a ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),". Primero reemplaza cada lado del ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," o el ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," y luego utiliza las tablas de verdad:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'"hola" == "hola" && 1 < 2')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"true && 5 != 5")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"1 == 1 || 2 != 1"))),(0,l.kt)("p",null,"Revisa tu respuesta evaluando cada expresi\xf3n en la consola de Node.js."),(0,l.kt)("p",null,"Podemos negar cualquier expresi\xf3n booleana anteponiendo un signo de exclamaci\xf3n ","(",(0,l.kt)("inlineCode",{parentName:"p"},"!"),")",". Por ejemplo:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!true")," es ",(0,l.kt)("inlineCode",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!false")," es ",(0,l.kt)("inlineCode",{parentName:"li"},"true"))),(0,l.kt)("p",null,"De hecho, esa es la tabla de verdad de la negaci\xf3n. Intenta los siguientes ejercicios. Primero reemplaza lo que est\xe1 entre par\xe9ntesis y luego aplica la tabla de verdad de la negaci\xf3n:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!(1 === 1)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!(2 <= 3)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!(true && 5 !== 5)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!(1 < 1 && 2 !== 3)"))),(0,l.kt)("p",null,"El proceso para solucionar cualquier expresi\xf3n booleana, sin importar qu\xe9 tan compleja sea, es el siguiente:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Eval\xfaa los operadores de igualdad ","(",(0,l.kt)("inlineCode",{parentName:"li"},"<"),", ",(0,l.kt)("inlineCode",{parentName:"li"},">"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"==="),", ",(0,l.kt)("inlineCode",{parentName:"li"},"!==")," etc",")","."),(0,l.kt)("li",{parentName:"ol"},"Eval\xfaa los ",(0,l.kt)("inlineCode",{parentName:"li"},"&&")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"||")," que esten dentro de par\xe9ntesis."),(0,l.kt)("li",{parentName:"ol"},"Eval\xfaa las negaciones ","(",(0,l.kt)("inlineCode",{parentName:"li"},"!"),")","."),(0,l.kt)("li",{parentName:"ol"},"Eval\xfaa cualquier ",(0,l.kt)("inlineCode",{parentName:"li"},"&&")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"||")," que falte.")),(0,l.kt)("p",null,"Hagamoslo juntos. Intentemos evaluar la siguiente expresi\xf3n booleana:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'3 != 4 && !("pedro" === "juan" || 26 > 10)\n')),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Evaluar los operadores de igualdad:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"true && !(false || true)\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Evaluar los ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," que est\xe9n dentro de par\xe9ntesis:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"true && !true\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Evaluar las negaciones:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"true && false\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Evaluar cualquier ",(0,l.kt)("inlineCode",{parentName:"p"},"&&")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"||")," que falte:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-text"},"false\n")))),(0,l.kt)("p",null,"Int\xe9ntalo tu. Decide si las siguientes expresiones eval\xfaan a ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),":"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"!(5 === 5) && 8 !== 8")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'("gut" === "ikk" && 26 > 30) || ("gut" === "gut" && 26 > 10)')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},'!("testing" == "testing" && !(5 > 8))'))))}u.isMDXComponent=!0}}]);