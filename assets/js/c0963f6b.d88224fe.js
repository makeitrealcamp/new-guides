"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[891],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>k});var n=t(7294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function s(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?s(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=n.createContext({}),p=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||s;return t?n.createElement(k,o(o({ref:a},c),{},{components:t})):n.createElement(k,o({ref:a},c))}));function k(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var s=t.length,o=new Array(s);o[0]=m;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=t[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4184:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var n=t(7462),r=(t(7294),t(3905));const s={},o="Testing",i={unversionedId:"javascript/avanzado/testing",id:"javascript/avanzado/testing",title:"Testing",description:"Las pruebas automatizadas, o tests, nos ayudan a prevenir errores, especialmente cuando hacemos nuevos cambios sobre nuestro c\xf3digo, haciendo nuestras aplicaciones m\xe1s mantenibles en el tiempo.",source:"@site/docs/javascript/avanzado/testing.md",sourceDirName:"javascript/avanzado",slug:"/javascript/avanzado/testing",permalink:"/docs/javascript/avanzado/testing",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/avanzado/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Excepciones",permalink:"/docs/javascript/avanzado/excepciones"},next:{title:"JavaScript en el Navegador",permalink:"/docs/javascript/navegador/"}},l={},p=[{value:"Tipos de pruebas",id:"tipos-de-pruebas",level:2},{value:"TDD (Test Driven Development) y BDD (Behaviour Driven Development)",id:"tdd-test-driven-development-y-bdd-behaviour-driven-development",level:2},{value:"Librer\xedas m\xe1s populares",id:"librer\xedas-m\xe1s-populares",level:2},{value:"Mocha",id:"mocha",level:3},{value:"Jest",id:"jest",level:3},{value:"matchers",id:"matchers",level:4},{value:"Probando c\xf3digo asincr\xf3nico",id:"probando-c\xf3digo-asincr\xf3nico",level:4},{value:"<code>setup</code> and <code>teardown</code>",id:"setup-and-teardown",level:4}],c={toc:p},u="wrapper";function d(e){let{components:a,...t}=e;return(0,r.kt)(u,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"testing"},"Testing"),(0,r.kt)("p",null,"Las ",(0,r.kt)("strong",{parentName:"p"},"pruebas automatizadas"),", o tests, nos ayudan a prevenir errores, especialmente cuando hacemos nuevos cambios sobre nuestro c\xf3digo, haciendo nuestras aplicaciones m\xe1s mantenibles en el tiempo."),(0,r.kt)("p",null,"La desventaja de escribir pruebas es que es lento y es m\xe1s c\xf3digo por mantener. Pero en el mediano y largo plazo las ventajas superan las desventajas."),(0,r.kt)("h2",{id:"tipos-de-pruebas"},"Tipos de pruebas"),(0,r.kt)("p",null,"En general, las pruebas se pueden dividir en dos grandes categor\xedas: unitarias y de integraci\xf3n."),(0,r.kt)("p",null,"Las ",(0,r.kt)("strong",{parentName:"p"},"pruebas unitarias")," se escriben para probar la l\xf3gica de m\xe9todos espec\xedficos de la aplicaci\xf3n, aislando sistemas externos como bases de datos, otros servidores, etc."),(0,r.kt)("p",null,"Por ejemplo, una prueba para un m\xe9todo que calcula el n\xfamero de palabras de un texto ser\xeda una prueba unitaria."),(0,r.kt)("p",null,"Las ",(0,r.kt)("strong",{parentName:"p"},"pruebas de integraci\xf3n")," se escriben para probar funcionalidades completas de la aplicaci\xf3n y pueden involucrar componentes y sistemas externos como navegadores, bases de datos, frameworks, etc."),(0,r.kt)("p",null,"Por ejemplo, una prueba para que verifica que los usuarios se pueden registrar correctamente ser\xeda una prueba de integraci\xf3n."),(0,r.kt)("h2",{id:"tdd-test-driven-development-y-bdd-behaviour-driven-development"},"TDD ","(","Test Driven Development",")"," y BDD ","(","Behaviour Driven Development",")"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"TDD")," es un proceso para escribir pruebas automatizadas en el que primero se escribe una prueba fallida, despu\xe9s se implementa el c\xf3digo para que funcione y, por \xfaltimo, se mejora el c\xf3digo verificando que la prueba siga pasando."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"BDD")," es muy similar pero el lenguaje cambia un poco para que sea entendible tanto por programadores como por personas que tienen mayor conocimiento del negocio."),(0,r.kt)("h2",{id:"librer\xedas-m\xe1s-populares"},"Librer\xedas m\xe1s populares"),(0,r.kt)("p",null,"Existen varias librer\xedas para realizar pruebas automatizadas en JavaScript como ",(0,r.kt)("a",{parentName:"p",href:"https://mochajs.org/"},"Mocha"),", ",(0,r.kt)("a",{parentName:"p",href:"https://jasmine.github.io/"},"Jasmine")," y ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest"),", entre otras."),(0,r.kt)("p",null,"En este cap\xedtulo vamos c\xf3mo configurar y utilizar ",(0,r.kt)("a",{parentName:"p",href:"https://mochajs.org/"},"Mocha")," y ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest"),", pero nos concentraremos principalmente en ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest"),", que es la que vamos a utilizar en los m\xf3dulos de ",(0,r.kt)("a",{parentName:"p",href:"../../nodejs/express"},"Express"),", ",(0,r.kt)("a",{parentName:"p",href:"../../react/"},"React")," y ",(0,r.kt)("a",{parentName:"p",href:"../../redux/"},"Redux")," m\xe1s adelante."),(0,r.kt)("h3",{id:"mocha"},"Mocha"),(0,r.kt)("p",null,"Mocha (se pronuncia como en mochaccino) es una de las librer\xedas de testing m\xe1s antiguas y populares. Para usarla primero debes agregar la librer\xeda a tu proyecto:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# yarn\n$ yarn add --dev mocha\n\n# npm\n$ npm install --save-dev mocha\n")),(0,r.kt)("p",null,"Crea una archivo llamado ",(0,r.kt)("inlineCode",{parentName:"p"},"test/test.js")," con el siguiente contenido:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const assert = require("assert");\n\ndescribe("sum", () => {\n  it("should add 1 + 2 correctly", () => {\n    assert.equal(1 + 2, 3);\n  });\n});\n')),(0,r.kt)("p",null,"Agrega el script de pruebas a tu ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json"),", que deber\xeda quedar parecido al siguiente:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "test": "mocha"\n  },\n  "devDependencies": {\n    "mocha": "^x.y.z"\n  }\n}\n')),(0,r.kt)("p",null,"Y ejec\xfatalo con el siguiente comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ npm test\n")),(0,r.kt)("p",null,"Este ejemplo muestra varios conceptos importantes de testing. El ",(0,r.kt)("strong",{parentName:"p"},"test")," empieza en la l\xednea 5 que utiliza el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"it"),"."),(0,r.kt)("p",null,"Un ",(0,r.kt)("strong",{parentName:"p"},"test")," se compone de uno o m\xe1s ",(0,r.kt)("strong",{parentName:"p"},"assertions"),", que son los que realizan las verificaciones sobre el c\xf3digo. En el ejemplo anterior la siguiente l\xednea es el ",(0,r.kt)("strong",{parentName:"p"},"assertion"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"assert.equal(1 + 2, 3);\n")),(0,r.kt)("p",null,"En este caso el ",(0,r.kt)("strong",{parentName:"p"},"assertion")," est\xe1 verificando que ",(0,r.kt)("inlineCode",{parentName:"p"},"1 + 2")," sea igual a ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,r.kt)("p",null,"Mocha no incluye una librer\xeda para hacer los ",(0,r.kt)("strong",{parentName:"p"},"assertions")," pero, en este caso, estamos utilizando la librer\xeda ",(0,r.kt)("inlineCode",{parentName:"p"},"assert")," que viene inclu\xedda en Node.js. Sin embargo, existen otras librer\xedas para hacer ",(0,r.kt)("strong",{parentName:"p"},"assertions"),", la m\xe1s popular con Mocha se llama ",(0,r.kt)("a",{parentName:"p",href:"http://www.chaijs.com/"},"Chai")," que permite realizar los ",(0,r.kt)("strong",{parentName:"p"},"assertions")," utilizando diferentes estilos, el m\xe1s com\xfan siendo el ",(0,r.kt)("inlineCode",{parentName:"p"},"expect"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const expect = chai.expect;\n\n// ...\nexpect(1 + 2).to.equal(3);\n")),(0,r.kt)("p",null,"Pero la idea es la misma, poder realizar verificaciones sobre nuestro c\xf3digo."),(0,r.kt)("h3",{id:"jest"},"Jest"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest")," es una librer\xeda de testing creada por Facebook y cada vez est\xe1 ganando m\xe1s popularidad por su facilidad de uso. A diferencia de Mocha, Jest ya trae incluidos los m\xe9todos para hacer los ",(0,r.kt)("strong",{parentName:"p"},"assertions"),"."),(0,r.kt)("p",null,"Empieza por agregar la librer\xeda:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"# yarn\n$ yarn add jest --dev\n\n# npm\n$ npm install --save-dev jest\n")),(0,r.kt)("p",null,"Ahora escribamos la prueba. Crea un archivo ",(0,r.kt)("inlineCode",{parentName:"p"},"sum.test.js")," con el siguiente contenido:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const sum = require('./sum');\n\ntest('1 + 2 equals 3', () => {\n  expect(1 + 2).toBe(3);\n});\n")),(0,r.kt)("p",null,"Modifica el script del ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," para que utilice Jest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),(0,r.kt)("p",null,"Y ejec\xfatalo con el siguiente comando:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"$ npm test\n")),(0,r.kt)("h4",{id:"matchers"},"matchers"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest")," utiliza algunos m\xe9todos (llamados ",(0,r.kt)("strong",{parentName:"p"},"matchers"),") para verificar los valores de diferentes formas."),(0,r.kt)("p",null,"En la prueba anterior vimos el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"toBe")," que verifica que el valor sea exactamente igual."),(0,r.kt)("p",null,"Una variaci\xf3n del ",(0,r.kt)("inlineCode",{parentName:"p"},"toBe")," es ",(0,r.kt)("inlineCode",{parentName:"p"},"toEqual")," que se utiliza para verificar objetos:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"test('igualdad de objetos', () => {\n  const data = { one: 1 };\n  data['two'] = 2;\n  expect(data).toEqual({ one: 1, two: 2 });\n});\n")),(0,r.kt)("p",null,"El opuesto del ",(0,r.kt)("inlineCode",{parentName:"p"},"toBe")," es ",(0,r.kt)("inlineCode",{parentName:"p"},"not.toBe"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'test("opuesto de toBe", () => {\n  expect(2 + 2).not.toBe(5);\n});\n')),(0,r.kt)("p",null,"Otros ",(0,r.kt)("strong",{parentName:"p"},"matchers")," comunes son:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toBeNull")," verifica que el valor sea ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toBeGreaterThan")," verifica que el valor sea mayor a un n\xfamero espec\xedfico, tambi\xe9n existe ",(0,r.kt)("inlineCode",{parentName:"li"},"toBeGreaterThanOrEqual"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toMatch")," verifica contra una expresi\xf3n regular."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toContain")," verifica que un array tenga un valor espec\xedfico."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"toThrow")," verifica que se haya lanzado una excepci\xf3n.")),(0,r.kt)("p",null,"La referencia a la lista completa de ",(0,r.kt)("strong",{parentName:"p"},"matchers")," la encuentras en ",(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/docs/en/using-matchers.html"},"este enlace"),"."),(0,r.kt)("h4",{id:"probando-c\xf3digo-asincr\xf3nico"},"Probando c\xf3digo asincr\xf3nico"),(0,r.kt)("p",null,"El reto de probar c\xf3digo asincr\xf3nico es ejecutar los ",(0,r.kt)("strong",{parentName:"p"},"assertions")," antes de que el test termine. Para esto Jest nos ofrece varias soluciones."),(0,r.kt)("p",null,"La primera es agregarle un argumento ",(0,r.kt)("inlineCode",{parentName:"p"},"done")," a la prueba. Ese argumento es una funci\xf3n que se debe invocar cuando finalice la prueba:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'it("waits for asynchronous code", done => {\n  setTimeout(() => {\n    expect(2 + 1).toBe(3);\n    done();\n  }, 1000);\n});\n')),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://facebook.github.io/jest/"},"Jest")," espera a que ",(0,r.kt)("inlineCode",{parentName:"p"},"done")," sea invocado antes de continuar con la siguiente prueba o terminar."),(0,r.kt)("p",null,"Si est\xe1s utilizando ",(0,r.kt)("strong",{parentName:"p"},"promesas")," es m\xe1s f\xe1cil, simplemente retorna la promesa y Jest va a esperar a que la promesa se resuelva para continuar:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'it("waits for promise to complete", () => {\n  return fetchData().then(data => {\n    expect(data.x).toBe(1);\n  });\n});\n')),(0,r.kt)("p",null,"Por \xfaltimo, puedes utilizar ",(0,r.kt)("strong",{parentName:"p"},"async/await")," en tus pruebas agregando la palabra ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," a la funci\xf3n que se le pasa al test, y utiliza ",(0,r.kt)("inlineCode",{parentName:"p"},"await")," donde realices llamados a funciones asincr\xf3nicas:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'it("supports async/await", async () => {\n  const data = await fetchData();\n  expect(data.x).toBe(1);\n});\n')),(0,r.kt)("h4",{id:"setup-and-teardown"},(0,r.kt)("inlineCode",{parentName:"h4"},"setup")," and ",(0,r.kt)("inlineCode",{parentName:"h4"},"teardown")),(0,r.kt)("p",null,"Es posible ejecutar c\xf3digo antes de cada test, despu\xe9s de cada test, antes de todos los tests y despu\xe9s de todos los test con los m\xe9todos ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeEach"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"afterEach"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"beforeAll")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"afterAll"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"beforeEach(() => {\n  // este c\xf3digo se ejecuta antes de cada test\n});\n\nafterEach(() => {\n  // este c\xf3digo se ejecuta despu\xe9s de cada test\n});\n\nbeforeAll(() => {\n  // este c\xf3digo se ejecuta antes de todos los tests\n});\n\nafterAll(() => {\n  // este c\xf3digo se ejecuta despu\xe9s de todos los tests\n});\n")))}d.isMDXComponent=!0}}]);