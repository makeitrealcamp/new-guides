"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[6126],{3905:(e,a,n)=>{n.d(a,{Zo:()=>p,kt:()=>g});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},p=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?t.createElement(g,s(s({ref:a},p),{},{components:n})):t.createElement(g,s({ref:a},p))}));function g(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5111:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(7462),r=(n(7294),n(3905));const o={},s="Programaci\xf3n asincr\xf3nica",i={unversionedId:"javascript/avanzado/programacion-asincronica",id:"javascript/avanzado/programacion-asincronica",title:"Programaci\xf3n asincr\xf3nica",description:"JavaScript es un lenguaje no bloqueante, lo que significa que cualquier acceso a dispositivos de E/S \\(Entrada y Salida\\) como el disco duro, la red, etc., ocurre de forma asincr\xf3nica.",source:"@site/docs/javascript/avanzado/programacion-asincronica.md",sourceDirName:"javascript/avanzado",slug:"/javascript/avanzado/programacion-asincronica",permalink:"/docs/javascript/avanzado/programacion-asincronica",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/avanzado/programacion-asincronica.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Scope, hoisting, closures",permalink:"/docs/javascript/avanzado/scope-hoisting-closures"},next:{title:"Excepciones",permalink:"/docs/javascript/avanzado/excepciones"}},l={},c=[{value:"Callbacks",id:"callbacks",level:2},{value:"Promesas",id:"promesas",level:2},{value:"Creando promesas",id:"creando-promesas",level:3},{value:"Async/await",id:"asyncawait",level:2}],p={toc:c},u="wrapper";function m(e){let{components:a,...n}=e;return(0,r.kt)(u,(0,t.Z)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"programaci\xf3n-asincr\xf3nica"},"Programaci\xf3n asincr\xf3nica"),(0,r.kt)("p",null,"JavaScript es un lenguaje ",(0,r.kt)("strong",{parentName:"p"},"no bloqueante"),", lo que significa que cualquier acceso a dispositivos de E/S ","(","Entrada y Salida",")"," como el disco duro, la red, etc., ocurre de forma ",(0,r.kt)("strong",{parentName:"p"},"asincr\xf3nica"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Asincr\xf3nico")," significa que no vamos a esperar una respuesta inmediatamente, sino que en alg\xfan momento en el futuro vamos a recibir la respuesta. Puedes compararlo con en el correo electr\xf3nico, que nos permite comunicarnos de forma ",(0,r.kt)("strong",{parentName:"p"},"asincr\xf3nica"),", cuando enviamos un correo a otra persona no esperamos la respuesta inmediatamente, podemos hacer otras actividades mientras recibimos la respuesta."),(0,r.kt)("p",null,"En JavaScript existen varias formas de manejar la programaci\xf3n ",(0,r.kt)("strong",{parentName:"p"},"asincr\xf3nica"),". En este cap\xedtulo vamos a ver tres: ",(0,r.kt)("strong",{parentName:"p"},"callbacks"),", ",(0,r.kt)("strong",{parentName:"p"},"promesas")," y la nueva sintaxis de ",(0,r.kt)("strong",{parentName:"p"},"async/await"),"."),(0,r.kt)("h2",{id:"callbacks"},"Callbacks"),(0,r.kt)("p",null,"Un ",(0,r.kt)("strong",{parentName:"p"},"callback")," es una funci\xf3n que se le pasa como par\xe1metro a otra funci\xf3n. Por ejemplo, el siguiente c\xf3digo utiliza jQuery para hacer un llamado AJAX e imprimir el resultado en la consola:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'$.get("http://example.com/", function(data) {\n  console.log(data);\n});\n\nconsole.log("Esto se imprime primero");\n')),(0,r.kt)("p",null,"Lo m\xe1s importante de este ejemplo es entender que el m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"get")," est\xe1 recibiendo dos par\xe1metros: una URL y un ",(0,r.kt)("strong",{parentName:"p"},"callback"),"."),(0,r.kt)("p",null,"La forma en que JavaScript ejecuta este c\xf3digo es la siguiente:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"JavaScript realiza la petici\xf3n HTTP a ",(0,r.kt)("a",{parentName:"li",href:"http://example.com/"},"http://example.com/")," de forma ",(0,r.kt)("strong",{parentName:"li"},"asincr\xf3nica"),"."),(0,r.kt)("li",{parentName:"ol"},"El programa contin\xfaa su ejecuci\xf3n ","(","no se bloquea",")",' e imprime "Esto se imprime primero" en la consola.'),(0,r.kt)("li",{parentName:"ol"},"Cuando el ",(0,r.kt)("inlineCode",{parentName:"li"},"get")," recibe la respuesta del servidor invoca el ",(0,r.kt)("strong",{parentName:"li"},"callback")," y se imprime el resultado en la consola.")),(0,r.kt)("p",null,"El problema con los ",(0,r.kt)("strong",{parentName:"p"},"callbacks")," es que cuando se anidan muchos llamados asincr\xf3nicos se crea lo que se conoce como el ",(0,r.kt)("strong",{parentName:"p"},"callback hell"),", que son muchos ",(0,r.kt)("strong",{parentName:"p"},"callbacks")," anidados. El siguiente c\xf3digo ficticio demuestra el problema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'$.get("http://example.com/", function(data) {\n  db.find(data, function(result) {\n    file.read(result, function(content) {\n      file.save(content, function() {\n        // y as\xed sucesivamente\n      });\n    });\n  });\n});\n')),(0,r.kt)("p",null,"Para que el c\xf3digo sea vea m\xe1s secuencial se introdujeron las promesas en ES6."),(0,r.kt)("h2",{id:"promesas"},"Promesas"),(0,r.kt)("p",null,"Las promesas est\xe1n constru\xeddas sobre ",(0,r.kt)("strong",{parentName:"p"},"callbacks")," pero hacen que el c\xf3digo se vea mucho m\xe1s secuencial:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"algoAsincronico()\n  .then(actualizarAlgo)\n  .then(guardarAlgo)\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"jQuery")," ahora soporta promesas para hacer llamados AJAX, as\xed que podemos modificar nuestro ejemplo ficticio anterior de la siguiente forma:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'$.get("http://example.com/")\n  .then(function(data) { return db.find(data); })\n  .then(function(result) { return file.read(result); })\n  .then(function(content) { return file.save(save); });\n')),(0,r.kt)("p",null,"Si utilizamos las funciones flecha de ES6 el c\xf3digo se ve a\xfan m\xe1s compacto:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'$.get("http://example.com/")\n  .then(data => db.find(data))\n  .then(result => file.read(result))\n  .then(content => file.save(save));\n')),(0,r.kt)("p",null,"El m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"then")," recibe dos par\xe1metros: un ",(0,r.kt)("strong",{parentName:"p"},"callback")," de \xe9xito y otro cuando ocurre un error. Sin embargo, las promesas tambi\xe9n tienen un m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"catch")," que se puede utilizar para manejar el error que se produzca en cualquier ",(0,r.kt)("inlineCode",{parentName:"p"},"then"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'$.get("http://example.com/")\n  .then(data => db.find(data))\n  .then(result => file.read(result))\n  .then(content => file.save(save))\n  .catch(error => console.log("Ocurri\xf3 un error"))\n')),(0,r.kt)("p",null,"Algo que estamos asumiendo en este ejemplo es que todos llamados ",(0,r.kt)("inlineCode",{parentName:"p"},"db.find"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"file.read")," y ",(0,r.kt)("inlineCode",{parentName:"p"},"file.save")," retornan una promesa ","(","de lo contrario la cadena se quiebra",")",". Pero supongamos que ",(0,r.kt)("inlineCode",{parentName:"p"},"db.find")," no retorna una promesa, s\xf3lo acepta un ",(0,r.kt)("strong",{parentName:"p"},"callback"),", en ese caso nos tocar\xeda crear una promesa."),(0,r.kt)("h3",{id:"creando-promesas"},"Creando promesas"),(0,r.kt)("p",null,"Las promesas se crean con el objeto ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise"),", que recibe un ",(0,r.kt)("strong",{parentName:"p"},"callback")," con dos par\xe1metros:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"new Promise(function(resolve, reject) {\n  // invoca resolve() para resolver la promesa o reject() para generar un error\n});\n")),(0,r.kt)("p",null,"Por ejemplo, vamos a crear un m\xe9todo ",(0,r.kt)("inlineCode",{parentName:"p"},"wait")," que envuelva ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout")," ","(","que no soporta promesas",")"," en una promesa y la devuelva:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'function wait(timeInMillis) {\n  return new Promise(function(resolve) {\n    setTimeout(function() { resolve(); }, timeInMillis);\n  });\n}\n\n// ahora utilicemos nuestro m\xe9todo wait\nwait(1000)\n  .then(function() { console.log("Hola despu\xe9s de 1 segundo"); });\n')),(0,r.kt)("p",null,"Volviendo a nuestro ejemplo ficticio, imagina que ",(0,r.kt)("inlineCode",{parentName:"p"},"db.find")," no soporta promesas, igual podemos envolverlo en una promesa:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'$.get("http://example.com/")\n  .then(data => {\n    return new Promise(resolve => {\n      db.find(data, result => resolve(result))\n    });\n  })\n  .then(result => file.read(result))\n  .then(content => file.save(save))\n  .catch(error => console.log("Ocurri\xf3 un error"))\n')),(0,r.kt)("p",null,"F\xedjate c\xf3mo utilizamos ",(0,r.kt)("inlineCode",{parentName:"p"},"resolve")," para pasar el resultado a la siguiente promesa. Esto es un patr\xf3n muy com\xfan en desarrollo con JavaScript hoy en d\xeda."),(0,r.kt)("p",null,"El problema de las promesas es que, como te puedes dar cuenta, no son triviales y son muy sujetas a errores. Por ejemplo, si en alg\xfan punto de la cadena de ",(0,r.kt)("inlineCode",{parentName:"p"},"then")," no devuelves una promesa, la cadena se rompe y encontrar ese tipo de errores es dif\xedcil."),(0,r.kt)("h2",{id:"asyncawait"},"Async/await"),(0,r.kt)("p",null,"Continuando con la tradici\xf3n de intentar que el c\xf3digo ",(0,r.kt)("strong",{parentName:"p"},"asincr\xf3nico")," de JavaScript se vea m\xe1s ",(0,r.kt)("strong",{parentName:"p"},"sincr\xf3nico"),", en ES7 se introdujo async/await, que Node.js soporta completamente en las versiones recientes."),(0,r.kt)("p",null,"Async/await est\xe1 construido sobre promesas."),(0,r.kt)("p",null,"Veamos un ejemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const performHttpRequest = async () => {\n  const result = await http.get();\n  console.log(result);\n}\n\nperformHttpRequest();\n")))}m.isMDXComponent=!0}}]);