"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[9962],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>g});var r=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,r,o=function(e,n){if(null==e)return{};var a,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=r.createContext({}),u=function(e){var n=r.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,o=e.mdxType,t=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(a),m=o,g=d["".concat(s,".").concat(m)]||d[m]||p[m]||t;return a?r.createElement(g,l(l({ref:n},c),{},{components:a})):r.createElement(g,l({ref:n},c))}));function g(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var t=a.length,l=new Array(t);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var u=2;u<t;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},3016:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>i,toc:()=>u});var r=a(7462),o=(a(7294),a(3905));const t={},l="Funciones",i={unversionedId:"javascript/funciones",id:"javascript/funciones",title:"Funciones",description:"Eventualmente vas tener algunas l\xedneas de c\xf3digo que necesitan ser ejecutadas varias veces y desde diferentes partes de tu programa. En vez de repetir el mismo c\xf3digo una y otra vez puedes crear una funci\xf3n \\(tambi\xe9n se les conoce como procedimientos o m\xe9todos\\) e invocarla cada vez que necesites ejecutar ese trozo de c\xf3digo.",source:"@site/docs/javascript/funciones.md",sourceDirName:"javascript",slug:"/javascript/funciones",permalink:"/docs/javascript/funciones",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/funciones.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"M\xe1s cadenas de texto",permalink:"/docs/javascript/mas-cadenas-de-texto"},next:{title:"Objetos literales",permalink:"/docs/javascript/objetos-literales"}},s={},u=[{value:"Argumentos",id:"argumentos",level:2},{value:"Retornando un valor",id:"retornando-un-valor",level:2},{value:"Las partes de una funci\xf3n",id:"las-partes-de-una-funci\xf3n",level:2},{value:"Cajas negras",id:"cajas-negras",level:2},{value:"Ejemplo",id:"ejemplo",level:2}],c={toc:u},d="wrapper";function p(e){let{components:n,...a}=e;return(0,o.kt)(d,(0,r.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"funciones"},"Funciones"),(0,o.kt)("p",null,"Eventualmente vas tener algunas l\xedneas de c\xf3digo que necesitan ser ejecutadas varias veces y desde diferentes partes de tu programa. En vez de repetir el mismo c\xf3digo una y otra vez puedes crear una funci\xf3n ","(","tambi\xe9n se les conoce como procedimientos o m\xe9todos",")"," e ",(0,o.kt)("strong",{parentName:"p"},"invocarla")," cada vez que necesites ejecutar ese trozo de c\xf3digo."),(0,o.kt)("p",null,"Crea un archivo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"functions.js")," y escribe lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function hello() {\n  console.log("Hola Mundo");\n}\n')),(0,o.kt)("p",null,"Para definir una funci\xf3n usamos la palabra reservada ",(0,o.kt)("inlineCode",{parentName:"p"},"function"),", le damos un nombre ","(","en este caso ",(0,o.kt)("inlineCode",{parentName:"p"},"hello"),")",", abrimos y cerramos par\xe9ntesis ","(",(0,o.kt)("inlineCode",{parentName:"p"},"()"),")",". Despu\xe9s abrimos corchetes ","(",(0,o.kt)("inlineCode",{parentName:"p"},"{"),")",", escribimos el cuerpo de la funci\xf3n ","(","el c\xf3digo que queremos ejecutar cuando sea invocada",")",", y por \xfaltimo cerramos los corchetes ",(0,o.kt)("inlineCode",{parentName:"p"},"}"),"."),(0,o.kt)("p",null,"Si ejecutamos este c\xf3digo no aparece nada en la pantalla:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node functions.js\n")),(0,o.kt)("p",null,"Una caracter\xedstica de las funciones es que no se ejecutan hasta que alguien las ",(0,o.kt)("strong",{parentName:"p"},"invoque"),". Modifiquemos nuestro programa para invocarla:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function hello() {\n  console.log("Hola Mundo");\n}\n\nhello(); // ac\xe1 la estamos invocamos\n')),(0,o.kt)("p",null,'En la \xfaltima l\xednea la estamos invocando. Si lo ejecutas ahora si deber\xeda aparecer "Hola mundo":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node methods.js\nHola mundo\n")),(0,o.kt)("h2",{id:"argumentos"},"Argumentos"),(0,o.kt)("p",null,"Las funciones pueden recibir cero o m\xe1s argumentos ","(","o par\xe1metros",")",". Piensa en los argumentos como ",(0,o.kt)("strong",{parentName:"p"},"variables")," que puedes utilizar dentro de la funci\xf3n. Utilizando argumentos podemos hacer una funci\xf3n reutilizable que salude a cualquier persona:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function hello(name) {\n  console.log("Hola " + name);\n}\n\nhello("Germ\xe1n");\nhello("David");\n')),(0,o.kt)("p",null,"Si lo ejecutamos deber\xedas ver lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node methods.js\nHola Germ\xe1n\nHola David\n")),(0,o.kt)("p",null,"Los argumentos se definen dentro de los par\xe9ntesis al declarar la funci\xf3n y se separan con coma."),(0,o.kt)("h2",{id:"retornando-un-valor"},"Retornando un valor"),(0,o.kt)("p",null,"Opcionalmente puedes retornar un valor desde la funci\xf3n utilizando la palabra clave ",(0,o.kt)("inlineCode",{parentName:"p"},"return"),". Podemos modificar la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"hello")," para que en vez de imprimir con ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," retorne una cadena de texto:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function hello(name) {\n  return "Hola " + name;\n}\n\nlet g1 = hello("Germ\xe1n"); // podemos asignar el valor de retorno a una variable\nconsole.log(g1);\n\n// podemos llamar la funci\xf3n directamente en el par\xe1metro de otra funci\xf3n.\nconsole.log(hello("David"));\n')),(0,o.kt)("p",null,"\xbfNotas la diferencia? En vez de hacer el ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," dentro de la funci\xf3n lo hacemos cuando la invocamos ","(","de lo contrario no aparecer\xeda nada en pantalla",")","."),(0,o.kt)("p",null,"En lo posible se recomienda retornar valores en vez de utilizar ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," dentro de las funciones. La raz\xf3n es que retornar un valor hace la funci\xf3n m\xe1s reutilizable. Ahora podemos utilizar esta funci\xf3n en otros contextos en donde no se utilice ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log")," para imprimir en la l\xednea de comandos, como en una aplicaci\xf3n Web."),(0,o.kt)("p",null,"El ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," es la \xfaltima l\xednea que se ejecuta de una funci\xf3n, cualquier c\xf3digo que se encuentre despu\xe9s de esa l\xednea ser\xe1 ignorado. Por ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function hello(name) {\n  return "Hola " + name;\n  console.log("Esto nunca se va a imprimir");\n}\n\nconsole.log(hello("Pedro"));\n')),(0,o.kt)("p",null,"Si ejecutas este c\xf3digo deber\xe1s ver lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node functions.js\nHola Pedro\n")),(0,o.kt)("p",null,"La \xfaltima l\xednea de la funci\xf3n nunca va a ser ejecutada porque la funci\xf3n siempre retorna antes de llegar a ella."),(0,o.kt)("h2",{id:"las-partes-de-una-funci\xf3n"},"Las partes de una funci\xf3n"),(0,o.kt)("p",null,"Recapitulemos lo que hemos visto hasta ahora. La sintaxis de una funci\xf3n es la siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function <name>([arg1], [arg2], ...) {\n  // cuerpo de la funci\xf3n\n  return <valor de retorno>;\n}\n")),(0,o.kt)("p",null,"Lo que debes tener en cuenta:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"La funci\xf3n se crea con la palabra clave ",(0,o.kt)("inlineCode",{parentName:"li"},"function"),"."),(0,o.kt)("li",{parentName:"ul"},"El nombre de la funci\xf3n tiene las mismas reglas de nombramiento que las variables: debe comenzar con ",(0,o.kt)("inlineCode",{parentName:"li"},"$"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"_")," o una letra, y despu\xe9s puede contener letras, d\xedgitos, ",(0,o.kt)("inlineCode",{parentName:"li"},"_")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"$"),"."),(0,o.kt)("li",{parentName:"ul"},"La funci\xf3n puede tener cero o m\xe1s argumentos dentro de los par\xe9ntesis que van despu\xe9s del nombre."),(0,o.kt)("li",{parentName:"ul"},"Piensa en los argumentos como variables que puedes utilizar en la funci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"Los valores de esos argumentos se definen cuando invocan la funci\xf3n."),(0,o.kt)("li",{parentName:"ul"},"Cada argumento debe tener un nombre de una variable v\xe1lido. Recuerda que el nombre de una variable debe comenzar con ",(0,o.kt)("inlineCode",{parentName:"li"},"$"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"_")," o una letra, y despu\xe9s puede contener letras, d\xedgitos, ",(0,o.kt)("inlineCode",{parentName:"li"},"_")," y ",(0,o.kt)("inlineCode",{parentName:"li"},"$"),"."),(0,o.kt)("li",{parentName:"ul"},"Puedes retornar un valor desde la funci\xf3n utilizando la palabra clave ",(0,o.kt)("inlineCode",{parentName:"li"},"return"),"."),(0,o.kt)("li",{parentName:"ul"},"El valor de retorno debe ser un tipo v\xe1lido de JavaScript: un n\xfamero, una cadena de texto, un booleano, un arreglo, etc."),(0,o.kt)("li",{parentName:"ul"},"Puedes almacenar el valor de retorno de una funci\xf3n en una variable o puedes invocar la funci\xf3n como par\xe1metro de otra funci\xf3n.")),(0,o.kt)("h2",{id:"cajas-negras"},"Cajas negras"),(0,o.kt)("p",null,"En muchas ocasiones es bueno pensar en funciones como cajas negras que reciben unos par\xe1metros de entrada y genera un valor de salida ","(","el valor de retorno",")","."),(0,o.kt)("h2",{id:"ejemplo"},"Ejemplo"),(0,o.kt)("p",null,"Vamos a hacer una funci\xf3n que calcule el indice de masa corporal ","(","IMC",")",". El IMC es una medida que relaciona el peso de una persona con su altura. La formula para calcular el IMC es peso dividido altura al cuadrado:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"IMC = peso / (altura^2)\n")),(0,o.kt)("p",null,"Traduzcamos eso a c\xf3digo JavaScript. Crea un archivo llamado ",(0,o.kt)("inlineCode",{parentName:"p"},"bmi.js")," ","(","BMI por Body Mass Index",")"," y escribe lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function bmi(weight, height) {\n  return weight / height ** 2\n}\n\nconsole.log("Tu IMC es: " + bmi(80, 1.8));\n')),(0,o.kt)("p",null,"Si ejecutas el archivo deber\xeda mostrar algo as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"$ node bmi.js\nTu IMC es: 24.691358024691358\n")))}p.isMDXComponent=!0}}]);