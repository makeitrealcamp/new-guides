"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[1991],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>g});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),d=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},c=function(e){var a=d(e.components);return t.createElement(i.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,g=u["".concat(i,".").concat(m)]||u[m]||p[m]||r;return n?t.createElement(g,s(s({ref:a},c),{},{components:n})):t.createElement(g,s({ref:a},c))}));function g(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=n.length,s=new Array(r);s[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var d=2;d<r;d++)s[d]=n[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9433:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=n(7462),o=(n(7294),n(3905));const r={},s="M\xe1s cadenas de texto",l={unversionedId:"javascript/mas-cadenas-de-texto",id:"javascript/mas-cadenas-de-texto",title:"M\xe1s cadenas de texto",description:"Las cadenas de texto \\(strings\\) son uno de los tipos de datos m\xe1s importantes en la programaci\xf3n. En muchas formas se comportan similar a los arreglos \\(piensa en una cadena de texto como un arreglo de caracteres\\), y a veces es \xfatil convertir de cadenas de texto a arreglos y viceversa. En este cap\xedtulo veremos todas las cosas interesantes que podemos hacer con cadenas de texto.",source:"@site/docs/javascript/mas-cadenas-de-texto.md",sourceDirName:"javascript",slug:"/javascript/mas-cadenas-de-texto",permalink:"/docs/javascript/mas-cadenas-de-texto",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/mas-cadenas-de-texto.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Arreglos",permalink:"/docs/javascript/arreglos"},next:{title:"Funciones",permalink:"/docs/javascript/funciones"}},i={},d=[{value:"Obteniendo la longitud de una cadena",id:"obteniendo-la-longitud-de-una-cadena",level:2},{value:"Recorriendo cadenas",id:"recorriendo-cadenas",level:2},{value:"Partiendo cadenas",id:"partiendo-cadenas",level:2},{value:"Otros m\xe9todos \xfatiles",id:"otros-m\xe9todos-\xfatiles",level:2}],c={toc:d},u="wrapper";function p(e){let{components:a,...n}=e;return(0,o.kt)(u,(0,t.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"m\xe1s-cadenas-de-texto"},"M\xe1s cadenas de texto"),(0,o.kt)("p",null,"Las cadenas de texto ","(","strings",")"," son uno de los tipos de datos m\xe1s importantes en la programaci\xf3n. En muchas formas se comportan similar a los arreglos ","(","piensa en una cadena de texto como un arreglo de caracteres",")",", y a veces es \xfatil convertir de cadenas de texto a arreglos y viceversa. En este cap\xedtulo veremos todas las cosas interesantes que podemos hacer con cadenas de texto."),(0,o.kt)("h2",{id:"obteniendo-la-longitud-de-una-cadena"},"Obteniendo la longitud de una cadena"),(0,o.kt)("p",null,"Abre la consola de Node.js y escribe ",(0,o.kt)("inlineCode",{parentName:"p"},'"hola".length'),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ node\n> "hola".length\n4\n')),(0,o.kt)("p",null,"Tambi\xe9n podemos obtener la longitud de una cadena que est\xe1 dentro de una variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> let name = "Pedro"\nundefined\n> name.length\n5\n')),(0,o.kt)("p",null,"Ten en cuenta que los espacios tambi\xe9n cuentan en la longitud de la cadena:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> "   ".length\n3\n')),(0,o.kt)("h2",{id:"recorriendo-cadenas"},"Recorriendo cadenas"),(0,o.kt)("p",null,"Puedes obtener los caracteres de una posici\xf3n espec\xedfica igual que con los arreglos. Por ejemplo, desde la consola de Node.js:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ node\n> let str = \"Hola Mundo\"\nundefined\n> str[0]\n'H'\n> str[1]\n'o'\n> str[2]\n`l'\n> str[3]\n'a'\n")),(0,o.kt)("p",null,"Podemos recorrer por los caracteres de una cadena utilizando un ciclo. Crea un archivo ",(0,o.kt)("inlineCode",{parentName:"p"},"strings.js")," y escribe lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'let str = "Hola Mundo";\n\nfor (let i = 0; i < str.length; i ++) {\n  console.log(str[i]);\n}\n')),(0,o.kt)("h2",{id:"partiendo-cadenas"},"Partiendo cadenas"),(0,o.kt)("p",null,"En ocasiones es \xfatil convertir una cadena en un arreglo. Para eso podemos utilizar el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"split")," que nos permite dividir una cadena de diferentes formas. Abre la consola de Node.js y ejecuta lo siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ node\n> \"Hola mundo\".split(\"\")\n[ 'H', 'o', 'l', 'a', ' ', 'm', 'u', 'n', 'd', 'o' ]\n> \"Hola mundo\".split(\" \")\n[ 'Hola', 'mundo' ]\n")),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"split")," recibe el caracter por el que quieres partir la cadena. Por ejemplo, podemos partir una cadena por comas:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ node\n> \"prueba,separar,cadenas\".split(\",\")\n[ 'prueba', 'separar', 'cadenas' ]\n")),(0,o.kt)("p",null,"Si quieres unir un arreglo en una cadena puedes utilizar el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"join"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ node\n> ["Hola", "mundo"].join(" ")\n\'Hola mundo\'\n')),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"join")," recibe un argumento que es el caracter que se va a utilizar para separar los elementos. Por ejemplo, podemos unir un arreglo con guiones:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ node\n> ["Hola", "mundo"].join("-")\n\'Hola-mundo\'\n')),(0,o.kt)("p",null,"Si omites el argumento del ",(0,o.kt)("inlineCode",{parentName:"p"},"join"),", los elementos se separan con coma:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ node\n> ["Hola", "mundo"].join()\n\'Hola,mundo\'\n')),(0,o.kt)("h2",{id:"otros-m\xe9todos-\xfatiles"},"Otros m\xe9todos \xfatiles"),(0,o.kt)("p",null,"Sobre las cadenas de texto podemos llamar varios m\xe9todos interesantes. Veamos algunos de ellos:"),(0,o.kt)("p",null,"Los m\xe9todos ",(0,o.kt)("inlineCode",{parentName:"p"},"toLowerCase()")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"toUpperCase()")," nos permiten convertir una cadena a min\xfasculas y may\xfasculas respectivamente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ node\n> \"Hola\".toLowerCase()\n'hola'\n> \"Hola\".toUpperCase()\n'HOLA'\n")),(0,o.kt)("p",null,"Los m\xe9todos ",(0,o.kt)("inlineCode",{parentName:"p"},"startsWith()")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"endsWith()")," nos permiten saber si una cadena comienza o termina con una subcadena espec\xedfica. Ten cuidado porque estos m\xe9todos tienen en cuenta may\xfasculas y min\xfasculas:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> "Hola Mundo".startsWith("Hola")\ntrue\n> "Hola Mundo".startsWith("Mundo")\nfalse\n> "Hola Mundo".endsWith("Mundo")\ntrue\n"Hola Mundo".endsWith("Hola")\nfalse\n')),(0,o.kt)("p",null,"Tambi\xe9n es posible anidar estos m\xe9todos. Por ejemplo, para verificar si una cadena comienza con una subcadena espec\xedfica podemos primero convertir a min\xfasculas y despu\xe9s si utilizar el ",(0,o.kt)("inlineCode",{parentName:"p"},"startsWith"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> "Hola Mundo".toLowerCase().startsWith("hola")\ntrue\n')),(0,o.kt)("p",null,"Puedes obtener una porci\xf3n de la cadena con el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"substring")," que recibe dos argumentos: el \xedndice desde el cu\xe1l se va a retornar la subcadena y, opcionalmente, la posici\xf3n hasta donde se quiere extraer. Si se omite el segundo argumento se extrae hasta el final de la cadena:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"> \"Hola Mundo\".substring(0, 3)\n'Hola'\n> \"Bienvenido!\".substring(4, 6)\n've'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Nota:")," Ten cuidado porque tambi\xe9n existe un m\xe9todo ",(0,o.kt)("strong",{parentName:"p"},"obsoleto")," ",(0,o.kt)("inlineCode",{parentName:"p"},"substr"),", que se diferencia de ",(0,o.kt)("inlineCode",{parentName:"p"},"substring")," por el segundo argumento. A diferencia de ",(0,o.kt)("inlineCode",{parentName:"p"},"substring"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"substr")," recibe, como segundo argumento, el n\xfamero de caracteres que se desean extraer. Este m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"substr")," es obsoleto y se recomienda evitarlo."),(0,o.kt)("p",null,"Puedes reemplazar un trozo de la cadena por otro con el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"replace"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> "Hola Mundo".replace("Mundo", "Germ\xe1n")\n\'Hola Germ\xe1n\'\n')),(0,o.kt)("p",null,"Puedes validar si la cadena contiene una subcadena espec\xedfica con el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"includes"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'> "Hola Mundo".includes("Hola")\ntrue\n')))}p.isMDXComponent=!0}}]);