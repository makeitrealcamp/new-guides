"use strict";(self.webpackChunkmir_guia=self.webpackChunkmir_guia||[]).push([[5908],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>v});var r=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,r,l=function(e,a){if(null==e)return{};var n,r,l={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=r.createContext({}),d=function(e){var a=r.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},u=function(e){var a=d(e.components);return r.createElement(s.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,l=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=l,v=c["".concat(s,".").concat(m)]||c[m]||p[m]||o;return n?r.createElement(v,t(t({ref:a},u),{},{components:n})):r.createElement(v,t({ref:a},u))}));function v(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var o=n.length,t=new Array(o);t[0]=m;var i={};for(var s in a)hasOwnProperty.call(a,s)&&(i[s]=a[s]);i.originalType=e,i[c]="string"==typeof e?e:l,t[1]=i;for(var d=2;d<o;d++)t[d]=n[d];return r.createElement.apply(null,t)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2229:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=n(7462),l=(n(7294),n(3905));const o={},t="Variables",i={unversionedId:"javascript/variables",id:"javascript/variables",title:"Variables",description:"Las variables son uno de los conceptos b\xe1sicos de la programaci\xf3n y nos permiten almacenar informaci\xf3n temporal que podemos usar m\xe1s adelante en nuestros programas.",source:"@site/docs/javascript/variables.md",sourceDirName:"javascript",slug:"/javascript/variables",permalink:"/docs/javascript/variables",draft:!1,editUrl:"https://github.com/makeitrealcamp/new-guides/tree/main/docs/javascript/variables.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Tipos y operadores",permalink:"/docs/javascript/tipos-y-operadores"},next:{title:"Condicionales",permalink:"/docs/javascript/condicionales"}},s={},d=[{value:"La utilidad de las variables",id:"la-utilidad-de-las-variables",level:2},{value:"Reasignando el valor de las variables",id:"reasignando-el-valor-de-las-variables",level:2},{value:"Variables sin valor",id:"variables-sin-valor",level:2},{value:"\xbfD\xf3nde y cu\xe1nto vive una variable?",id:"d\xf3nde-y-cu\xe1nto-vive-una-variable",level:2}],u={toc:d},c="wrapper";function p(e){let{components:a,...n}=e;return(0,l.kt)(c,(0,r.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"variables"},"Variables"),(0,l.kt)("p",null,"Las variables son uno de los conceptos b\xe1sicos de la programaci\xf3n y nos permiten almacenar informaci\xf3n temporal que podemos usar m\xe1s adelante en nuestros programas."),(0,l.kt)("p",null,"Crea un archivo llamado ",(0,l.kt)("inlineCode",{parentName:"p"},"variables.js")," y agrega lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let name = "Germ\xe1n"; // c\xe1mbialo por tu nombre\nconsole.log("Hola " + name);\n')),(0,l.kt)("p",null,"En este ejemplo estamos definiendo una variable con nombre ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),' y le asignamos el valor "Germ\xe1n" ',"(","o el valor que le hayas asignado",")",'. En la siguiente l\xednea estamos utilizando concatenaci\xf3n de cadenas para mostrar la cadena de texto "Hola " seguido del valor que tenga en ese momento la variable ',(0,l.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,l.kt)("p",null,"Las variables se crean con la palabra clave ",(0,l.kt)("inlineCode",{parentName:"p"},"var")," seguido del nombre de la variable. Opcionalmente, le puedes asignar un valor a la variable utilizando el caracter igual y el valor que le quieras dar. El punto y coma ","(",(0,l.kt)("inlineCode",{parentName:"p"},";"),")"," al final es opcional pero se considera una buena pr\xe1ctica tenerlo."),(0,l.kt)("p",null,"El nombre de una variable debe comenzar con ",(0,l.kt)("inlineCode",{parentName:"p"},"$"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," o una letra, y despu\xe9s puede contener letras, d\xedgitos, ",(0,l.kt)("inlineCode",{parentName:"p"},"_")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"$"),". Ejemplos de nombres v\xe1lidos de variables incluyen ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"$element")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"_trains"),"."),(0,l.kt)("p",null,"Por otro lado, ejemplos de nombres no v\xe1lidos incluyen ",(0,l.kt)("inlineCode",{parentName:"p"},"443german"),", porque no puede empezar con un n\xfamero, y ",(0,l.kt)("inlineCode",{parentName:"p"},"element&123"),", porque el caracter ",(0,l.kt)("inlineCode",{parentName:"p"},"&")," no es v\xe1lido en el nombre."),(0,l.kt)("p",null,"Las palabras reservadas de JavaScript no se pueden usar como nombres de variables."),(0,l.kt)("p",null,"Como buena pr\xe1ctica se recomienda empezar las variables con una letra en min\xfascula y, si el nombre se compone de varias palabras, capitalizar cada palabra despu\xe9s de la primera ","(","m\xe1s conocido como camel case",")",". Por ejemplo ",(0,l.kt)("inlineCode",{parentName:"p"},"videoTranscoder")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName"),"."),(0,l.kt)("p",null,"Los nombres de las variables diferencian may\xfasculas y min\xfasculas ","(","p.e. ",(0,l.kt)("inlineCode",{parentName:"p"},"firstname")," es diferente a ",(0,l.kt)("inlineCode",{parentName:"p"},"firstName"),")","."),(0,l.kt)("h2",{id:"la-utilidad-de-las-variables"},"La utilidad de las variables"),(0,l.kt)("p",null,"Crea un archivo llamado ",(0,l.kt)("inlineCode",{parentName:"p"},"square.js")," y escribe el siguiente c\xf3digo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log("El per\xedmetro de un cuadrado de lado 5 es " + (5 * 4));\nconsole.log("El \xe1rea de un cuadrado de lado 5 es " + (5 * 5));\n')),(0,l.kt)("p",null,"Al ejecutarlo deber\xeda aparecer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"$ node square.js\nEl per\xedmetro de un cuadrado de lado 5 es 20\nEl \xe1rea de un cuadrado de lado 5 es 25\n")),(0,l.kt)("p",null,"El problema con este c\xf3digo es que si quisi\xe9ramos calcular el per\xedmetro y el \xe1rea de un cuadrado de lado 10, o 20, tendr\xedamos que modificar ese valor en varias partes del c\xf3digo. Podemos mejorarlo utilizando una variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'let side = 5;\n\nconsole.log("El per\xedmetro de un cuadrado de lado " + side + " es " + (side * 4));\nconsole.log("El \xe1rea de un cuadrado de lado " + side + " es " + (side * side));\n')),(0,l.kt)("p",null,"Si ejecutas el c\xf3digo te deber\xeda dar el mismo resultado. La ventaja es que si quieres calcular el per\xedmetro y el \xe1rea de un cuadrado con otro tama\xf1o solo debes cambiar el valor de la variable. Intenta con 18 ","(","te deber\xeda dar 72 de per\xedmetro y 324 de \xe1rea",")"," y despu\xe9s con 39."),(0,l.kt)("h2",{id:"reasignando-el-valor-de-las-variables"},"Reasignando el valor de las variables"),(0,l.kt)("p",null,"Puedes reasignar el valor de una variable las veces que lo desees. La forma de hacerlo es similar a la forma en que se declara la una variable con un valor inicial, pero omitiendo la palabra ",(0,l.kt)("inlineCode",{parentName:"p"},"var"),". Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'// asumiendo que name fue ya declarada\nname = "Nuevo valor";\n')),(0,l.kt)("p",null,"Int\xe9ntalo. Abre la consola de Node.js e ingresa lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},'$ node\n> let name = "Pedro" // declaramos name y le asignamos el valor "Pedro"\nundefined\n> name               // verificamos el valor actual\n"Pedro"\n> name = 123         // reasignamos el valor de name con el n\xfamero 123\n123\n> name               // verificamos cu\xe1l es el valor actual de name\n123\n')),(0,l.kt)("p",null,"F\xedjate que, como en este ejemplo, el nuevo valor que se le asigne a la variable no tiene que ser del mismo tipo del valor anterior."),(0,l.kt)("p",null,"Tambi\xe9n es posible reasignar el valor de una variable utilizando su valor anterior. Por ejemplo, intenta lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ node\n> let count = 1      // declaramos la variable con un valor inicial\nundefined\n> count              // verificamos cu\xe1l es el valor actual de count\n1\n> count = count + 1  // incrementamos en uno el valor actual de count\n2\n> count              // verificamos el valor actual de count\n2\n")),(0,l.kt)("p",null,"De hecho, incrementar el valor de una variable es tan com\xfan que existe un atajo para eso. Asumiendo que sigues en la consola de Node.js intenta lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"> count ++\n3\n> count ++\n4\n")),(0,l.kt)("h2",{id:"variables-sin-valor"},"Variables sin valor"),(0,l.kt)("p",null,"En programaci\xf3n es muy com\xfan declarar una variable sin un valor, quiz\xe1 porque m\xe1s adelante vamos a pedirle el valor al usuario, o simplemente porque el valor se lo vamos a asignar despu\xe9s."),(0,l.kt)("p",null,"Una variable declarada sin un valor va a tener el valor de ",(0,l.kt)("inlineCode",{parentName:"p"},"undefined"),"."),(0,l.kt)("p",null,"Abre la consola de Node.js intenta lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ node\n> let name\nundefined\n> name\nundefined\n")),(0,l.kt)("h2",{id:"d\xf3nde-y-cu\xe1nto-vive-una-variable"},"\xbfD\xf3nde y cu\xe1nto vive una variable?"),(0,l.kt)("p",null,"Las variables se almacenan en en una memoria especial del computador llamada ",(0,l.kt)("strong",{parentName:"p"},"memoria RAM")," y viven durante la ejecuci\xf3n del programa, es decir, desde el momento en que las defines hasta que tu programa termina de ejecutarse. Si abres la consola de Node.js y defines una variable, esta vive hasta que cierres esa sesi\xf3n."),(0,l.kt)("p",null,"La ",(0,l.kt)("strong",{parentName:"p"},"memoria RAM"),' es una memor\xeda de r\xe1pido acceso que est\xe1 disponible mientras tu computador est\xe1 encendido. El sistema operativo se encarga de administrar la memoria RAM y asignarle una porci\xf3n a cada programa que se est\xe1 ejecutando. Cuando el programa termina, el sistema operativo reclama esa memoria y "destruye" todas las variables que ese programa haya creado.'),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Nota:")," M\xe1s adelante, cuando veamos funciones, aprenderemos que las variables tienen un ",(0,l.kt)("strong",{parentName:"p"},"alcance")," y no todas las variables sobreviven hasta que termina el programa."))}p.isMDXComponent=!0}}]);